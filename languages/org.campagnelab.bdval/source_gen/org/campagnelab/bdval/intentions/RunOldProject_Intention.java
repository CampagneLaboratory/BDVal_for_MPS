package org.campagnelab.bdval.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import java.io.File;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.apache.commons.io.FileUtils;
import java.util.Iterator;
import javax.swing.JPanel;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import org.campagnelab.bdval.behavior.Project_Behavior;
import javax.swing.JFileChooser;
import jetbrains.mps.intentions.IntentionDescriptor;

public class RunOldProject_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public RunOldProject_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.bdval.structure.Project";
  }

  public String getPresentation() {
    return "RunOldProject";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.bdval.intentions.RunOldProject_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.bdval";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:f3ea1e25-aab8-445d-9fb9-090b3b3258bf(org.campagnelab.bdval.intentions)", "6525722185905227908");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new RunOldProject_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Run Previously Build Project";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      String name;
      File rootDirectory;
      File file;
      File dir;
      String[] extensions = {"xml", "properties"};
      HashMap map = new HashMap();

      try {
        name = SPropertyOperations.getString(node, "name").replace("\\s", "");
        rootDirectory = new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "properties", true), "outputDirectory", true), "directoryLocation") + "/" + name);
        Collection possibleFiles = FileUtils.listFiles(rootDirectory, extensions, true);
        for (Iterator iterator = possibleFiles.iterator(); iterator.hasNext();) {
          file = (File) iterator.next();
          dir = new File(file.getParentFile().getParent());
          if (file.getName().matches("memo.properties") && new File(dir + "/" + name + ".xml").exists()) {
            map.put(dir.getName(), file.getAbsolutePath());
          }
        }
      } catch (Exception e) {
        // No prebuild projects in output location with project name or outputlocation/name empty 
      }

      JPanel panel = new JPanel(new GridLayout(2, 1));
      JLabel label = new JLabel("Selech which project to run or search for project folder");
      JComboBox selection = new JComboBox(map.keySet().toArray());
      panel.add(label);
      panel.add(selection);

      String[] options = {"Other Folder", "Cancel", "OK"};
      int reply = JOptionPane.showOptionDialog(null, panel, "Choose Project", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
      if (reply == 2) {
        try {
          Project_Behavior.call_runBDVal_6752420586317975318(node, map.get(selection.getSelectedItem().toString()).toString());
        } catch (Exception e) {
          JOptionPane.showMessageDialog(null, "Invalid Selection");
        }
      } else if (reply == 0) {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int fileReply = chooser.showOpenDialog(null);
        if (fileReply == JFileChooser.APPROVE_OPTION) {
          dir = chooser.getSelectedFile();
          name = dir.getParentFile().getName();
          if (new File(dir + "/" + name + ".xml").exists() && new File(dir + "/memo/memo.properties").exists()) {
            Project_Behavior.call_runBDVal_6752420586317975318(node, dir + "/memo/memo.properties");
          } else {
            JOptionPane.showMessageDialog(null, "Invalid Selection\n" + "Project xml file and memo folder must be in selected directory");
          }
        }
      }
    }

    public IntentionDescriptor getDescriptor() {
      return RunOldProject_Intention.this;
    }
  }
}
