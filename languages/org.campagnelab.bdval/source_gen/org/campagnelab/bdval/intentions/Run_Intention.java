package org.campagnelab.bdval.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import org.campagnelab.bdval.behavior.Project_Behavior;
import jetbrains.mps.intentions.IntentionDescriptor;

public class Run_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public Run_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.bdval.structure.Project";
  }

  public String getPresentation() {
    return "Run";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.bdval.intentions.Run_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.bdval";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return new File(SPropertyOperations.getString(SLinkOperations.getTarget(node, "properties", true), "outputLocation") + "/" + SPropertyOperations.getString(node, "name").replaceAll("\\s", "")).isDirectory();
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:f3ea1e25-aab8-445d-9fb9-090b3b3258bf(org.campagnelab.bdval.intentions)", "6525722185905227908");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new Run_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Run Project";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      Project_Behavior.call_runBDVal_6752420586317975318(node);
    }

    public IntentionDescriptor getDescriptor() {
      return Run_Intention.this;
    }
  }
}
