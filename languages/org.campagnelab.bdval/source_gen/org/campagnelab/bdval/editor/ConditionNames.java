package org.campagnelab.bdval.editor;

/*Generated by MPS */

import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuComponent;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_PropertyValues;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class ConditionNames extends AbstractCellMenuComponent {
  public ConditionNames() {
    super(new SubstituteInfoPartExt[]{new ConditionNames.Condition_name_cellMenu_nv4rk6_a0()});
  }

  public static class Condition_name_cellMenu_nv4rk6_a0 extends AbstractCellMenuPart_PropertyValues {
    public Condition_name_cellMenu_nv4rk6_a0() {
    }

    public List<String> getPropertyValues(SNode node, IOperationContext operationContext, EditorContext editorContext) {
      if (SNodeOperations.hasRole(SNodeOperations.getParent(node), "org.campagnelab.bdval.structure.Properties", "evaluate")) {
        return ListSequence.fromListAndArray(new ArrayList<String>(), "Feature Selection Fold-true", "Feature Selection Fold-false", "Baseline", "Naive Bayes", "Logit Boost", "Logistic", "Random Forest", "K Star", "Whole Chip", "Baseline Tune C", "Foldchange Genetic Algorithm", "Foldchange SVM Global", "Foldchange SVM Iterative", "Full Genetic Algorithm", "Genelist Genetic Algorithm", "Genelist SVM Global", "Genelist SVM Global Tune C", "Min/Max SVM Global", "Pathways T-test SVM Global", "Pathways Tune C", "Pathways Baseline", "SVM Iterative", "T-test Genetic Algorithm", "T-test SVM Global", "T-test SVM Iterative");
      } else if (SNodeOperations.hasRole(SNodeOperations.getParent(node), "org.campagnelab.bdval.structure.Properties", "pathway")) {
        return ListSequence.fromListAndArray(new ArrayList<String>(), "Feature Selection Fold-true", "Feature Selection Fold-false", "Baseline", "Baseline Tune C", "Foldchange Genetic Algorithm", "Foldchange SVM Global", "Foldchange SVM Iterative", "Full Genetic Algorithm", "Genelist Genetic Algorithm", "Genelist SVM Global", "Genelist SVM Global Tune C", "Min/Max SVM Global", "Pathways Build Pathway Components", "Pathways T-test SVM Global", "Pathways Tune C", "Pathways Baseline", "SVM Iterative", "T-test Genetic Algorithm", "T-test SVM Global", "T-test SVM Iterative");
      } else if (SNodeOperations.hasRole(SNodeOperations.getParent(node), "org.campagnelab.bdval.structure.Properties", "genetic")) {
        return ListSequence.fromListAndArray(new ArrayList<String>(), "Feature Selection Fold-true", "Feature Selection Fold-false", "Baseline", "Whole Chip", "Baseline Tune C", "Foldchange SVM Global", "Foldchange SVM Iterative", "Foldchange Genetic Algorithm", "Full Genetic Algorithm", "Genelist Genetic Algorithm", "Genelist SVM Global", "Genelist SVM Global Tune C", "Min/Max SVM Global", "Pathways T-test SVM Global", "Pathways Tune C", "Pathways Baseline", "SVM Iterative", "T-test Genetic Algorithm", "T-test SVM Global", "T-test SVM Iterative");
      } else if (SNodeOperations.hasRole(SNodeOperations.getParent(node), "org.campagnelab.bdval.structure.Properties", "tuneC")) {
        return ListSequence.fromListAndArray(new ArrayList<String>(), "Feature Selection Fold-true", "Feature Selection Fold-false", "Baseline", "Whole Chip", "Baseline Tune C", "Foldchange Genetic Algorithm", "Foldchange SVM Global", "Foldchange SVM Iterative", "Full Genetic Algorithm", "Genelist Genetic Algorithm", "Genelist SVM Global", "Genelist SVM Global Tune C", "Min/Max SVM Global", "Pathways T-test SVM Global", "Pathways Tune C", "Pathways Baseline", "T-test Genetic Algorithm", "T-test SVM Global", "T-test SVM Iterative", "SVM Iterative");
      } else {
        return ListSequence.fromList(new ArrayList<String>());
      }
    }
  }
}
