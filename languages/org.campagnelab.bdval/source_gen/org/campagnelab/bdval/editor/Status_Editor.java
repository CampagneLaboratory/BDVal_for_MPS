package org.campagnelab.bdval.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import org.campagnelab.ui.code.Swing.ButtonCallback;
import org.campagnelab.bdval.behavior.Status_Behavior;
import org.campagnelab.ui.code.Swing.Button;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.io.FileFilter;
import java.io.File;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class Status_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_gjf57x_a(editorContext, node);
  }

  private EditorCell createCollection_gjf57x_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_gjf57x_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_gjf57x_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_gjf57x_b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_gjf57x_c0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_gjf57x_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Status:");
    editorCell.setCellId("Constant_gjf57x_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createCollection_gjf57x_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_gjf57x_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createJComponent_gjf57x_a1a(editorContext, node));
    return editorCell;
  }

  private EditorCell createJComponent_gjf57x_a1a(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Status_Editor._QueryFunction_JComponent_gjf57x_a0b0(node, editorContext), "_gjf57x_a1a");
    editorCell.setCellId("JComponent_gjf57x_a1a");
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_gjf57x_a0b0(final SNode node, final EditorContext editorContext) {
    ButtonCallback callback = new ButtonCallback(node, editorContext) {
      public void process(final SNode n, final EditorContext editorContext) {
        {
          final SNode node = ((SNode) n);
          Status_Behavior.call_updateStatus_4578313781751627046(node);
        }
      }
    };
    return Button.createButton("Refresh", editorContext, node, callback);

  }

  private EditorCell createCollection_gjf57x_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_gjf57x_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    if (renderingCondition_gjf57x_a0c0(node, editorContext)) {
      editorCell.addEditorCell(this.createConstant_gjf57x_a2a(editorContext, node));
    }
    if (renderingCondition_gjf57x_a1c0(node, editorContext)) {
      editorCell.addEditorCell(this.createConstant_gjf57x_b2a(editorContext, node));
    }
    if (renderingCondition_gjf57x_a2c0(node, editorContext)) {
      editorCell.addEditorCell(this.createRefNodeList_gjf57x_c2a(editorContext, node));
    }
    return editorCell;
  }

  private EditorCell createConstant_gjf57x_a2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "No Previously Run Projects in this location");
    editorCell.setCellId("Constant_gjf57x_a2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static boolean renderingCondition_gjf57x_a0c0(SNode node, EditorContext editorContext) {
    SNode project = SNodeOperations.getAncestor(node, "org.campagnelab.bdval.structure.Project", false, false);
    String projectName = SPropertyOperations.getString(project, "name");
    String outputDirectory = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(project, "properties", true), "outputDirectory", true), "directoryLocation");
    String directoryName = SPropertyOperations.getString(SLinkOperations.getTarget(project, "properties", true), "directoryName");
    FileFilter resultsFilter = new FileFilter() {
      public boolean accept(File file) {
        return file.getAbsolutePath().endsWith("-results") && file.isDirectory();
      }
    };
    return (projectName != null && projectName.length() > 0) && (outputDirectory != null && outputDirectory.length() > 0) && (directoryName != null && directoryName.length() > 0) && new File(outputDirectory + "/" + projectName + "/" + directoryName).isDirectory() && new File(outputDirectory + "/" + projectName + "/" + directoryName).listFiles(resultsFilter).length == 0;

  }

  private EditorCell createConstant_gjf57x_b2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "BDValConf has not been built in this location");
    editorCell.setCellId("Constant_gjf57x_b2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static boolean renderingCondition_gjf57x_a1c0(SNode node, EditorContext editorContext) {
    SNode project = SNodeOperations.getAncestor(node, "org.campagnelab.bdval.structure.Project", false, false);
    return isEmptyString(SPropertyOperations.getString(project, "name")) || isEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(project, "properties", true), "outputDirectory", true), "directoryLocation")) || isEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(project, "properties", true), "directoryName")) || !(new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(project, "properties", true), "outputDirectory", true), "directoryLocation") + "/" + SPropertyOperations.getString(project, "name") + "/" + SPropertyOperations.getString(SLinkOperations.getTarget(project, "properties", true), "directoryName")).isDirectory());
  }

  private EditorCell createRefNodeList_gjf57x_c2a(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new Status_Editor.resultListHandler_gjf57x_c2a(node, "result", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_result");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }

  private static class resultListHandler_gjf57x_c2a extends RefNodeListHandler {
    public resultListHandler_gjf57x_c2a(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), editorContext));
        }
      }
    }
  }

  private static boolean renderingCondition_gjf57x_a2c0(SNode node, EditorContext editorContext) {
    SNode project = SNodeOperations.getAncestor(node, "org.campagnelab.bdval.structure.Project", false, false);
    String projectName = SPropertyOperations.getString(project, "name");
    String outputDirectory = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(project, "properties", true), "outputDirectory", true), "directoryLocation");
    return (projectName != null && projectName.length() > 0) && (outputDirectory != null && outputDirectory.length() > 0) && new File(outputDirectory + "/" + projectName).isDirectory() && new File(outputDirectory + "/" + projectName).listFiles().length > 0 && ListSequence.fromList(SLinkOperations.getTargets(node, "result", true)).isNotEmpty();
  }

  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
