package org.campagnelab.bdval.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.editor.runtime.style.Padding;
import jetbrains.mps.editor.runtime.style.Measure;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import org.campagnelab.ui.code.Swing.ButtonCallback;
import org.campagnelab.bdval.behavior.Result_Behavior;
import org.campagnelab.ui.code.Swing.Button;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import org.campagnelab.bdval.charts.mcc.ChartViewer_Charts;

public class Result_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_ouom3r_a(editorContext, node);
  }

  private EditorCell createCollection_ouom3r_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_a");
    editorCell.setBig(true);
    Style style = new StyleImpl();
    style.set(StyleAttributes.READ_ONLY, true);
    editorCell.getStyle().putAll(style);
    editorCell.setCanBeFolded(true);
    editorCell.setFoldedCell(this.createProperty_ouom3r_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_a0(editorContext, node));
    if (renderingCondition_ouom3r_a1a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_ouom3r_b0(editorContext, node));
    }
    if (renderingCondition_ouom3r_a2a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_ouom3r_c0(editorContext, node));
    }
    editorCell.addEditorCell(this.createConstant_ouom3r_d0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ouom3r_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_f0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ouom3r_g0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_h0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ouom3r_i0(editorContext, node));
    if (renderingCondition_ouom3r_a9a(node, editorContext)) {
      editorCell.addEditorCell(this.createConstant_ouom3r_j0(editorContext, node));
    }
    if (renderingCondition_ouom3r_a01a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_ouom3r_k0(editorContext, node));
    }
    if (renderingCondition_ouom3r_a11a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_ouom3r_l0(editorContext, node));
    }
    if (renderingCondition_ouom3r_a21a(node, editorContext)) {
      editorCell.addEditorCell(this.createConstant_ouom3r_m0(editorContext, node));
    }
    if (renderingCondition_ouom3r_a31a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_ouom3r_n0(editorContext, node));
    }
    editorCell.addEditorCell(this.createConstant_ouom3r_o0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Result:");
    editorCell.setCellId("Constant_ouom3r_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PADDING_RIGHT, new Padding(5, Measure.SPACES));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createCollection_ouom3r_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createJComponent_ouom3r_a1a(editorContext, node));
    return editorCell;
  }

  private static boolean renderingCondition_ouom3r_a1a(SNode node, EditorContext editorContext) {
    return SPropertyOperations.getInteger(node, "numberModels") > 0 && isEmptyString(SPropertyOperations.getString(node, "maqciiFile"));
  }

  private EditorCell createJComponent_ouom3r_a1a(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Result_Editor._QueryFunction_JComponent_ouom3r_a0b0(node, editorContext), "_ouom3r_a1a");
    editorCell.setCellId("JComponent_ouom3r_a1a");
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_ouom3r_a0b0(final SNode node, final EditorContext editorContext) {
    ButtonCallback callback = new ButtonCallback(node, editorContext) {
      public void process(final SNode n, final EditorContext editorContext) {
        {
          final SNode node = ((SNode) n);
          Result_Behavior.call_evaluateStatistics_3634366430331113687(node);

        }
      }
    };
    return Button.createButton("Evaluate Statistics", editorContext, node, callback);

  }

  private EditorCell createCollection_ouom3r_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createJComponent_ouom3r_a2a(editorContext, node));
    return editorCell;
  }

  private static boolean renderingCondition_ouom3r_a2a(SNode node, EditorContext editorContext) {
    return !(SPropertyOperations.getBoolean(node, "finalModels")) && SPropertyOperations.getInteger(node, "numberModels") != 0;
  }

  private EditorCell createJComponent_ouom3r_a2a(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Result_Editor._QueryFunction_JComponent_ouom3r_a0c0(node, editorContext), "_ouom3r_a2a");
    editorCell.setCellId("JComponent_ouom3r_a2a");
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_ouom3r_a0c0(final SNode node, final EditorContext editorContext) {
    ButtonCallback callback = new ButtonCallback(node, editorContext) {
      public void process(final SNode n, final EditorContext editorContext) {
        {
          final SNode node = ((SNode) n);
          Result_Behavior.call_generateFinalModel_6380268605238741230(node);
        }
      }
    };
    return Button.createButton("Generate Final Models", editorContext, node, callback);

  }

  private EditorCell createConstant_ouom3r_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Directory Name:");
    editorCell.setCellId("Constant_ouom3r_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_ouom3r_e0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("directory");
    provider.setNoTargetText("<no directory>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_directory");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Folder Name:");
    editorCell.setCellId("Constant_ouom3r_f0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_ouom3r_g0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_h0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Number of Models:");
    editorCell.setCellId("Constant_ouom3r_h0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_ouom3r_i0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("numberModels");
    provider.setNoTargetText("<no numberModels>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_numberModels");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    if (Result_Editor._StyleParameter_QueryFunction_ouom3r_a1i0((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode()))) {
      {
        Style styleToPut;
        styleToPut = new StyleImpl();
        EditingStyles_StyleSheet.apply_RedText(styleToPut, editorCell);
        style.putAll(styleToPut);
      }
    }
    if (Result_Editor._StyleParameter_QueryFunction_ouom3r_a2i0((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode()))) {
      {
        Style styleToPut;
        styleToPut = new StyleImpl();
        EditingStyles_StyleSheet.apply_RedText(styleToPut, editorCell);
        style.putAll(styleToPut);
      }
    }
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private static boolean _StyleParameter_QueryFunction_ouom3r_a1i0(EditorContext editorContext, SNode node) {
    return SPropertyOperations.getInteger(node, "numberModels") == 0;
  }

  private static boolean _StyleParameter_QueryFunction_ouom3r_a2i0(EditorContext editorContext, SNode node) {
    return SPropertyOperations.getBoolean(node, "finalModels") && (SPropertyOperations.getInteger(node, "numberModels") != SPropertyOperations.getInteger(node, "numberFinalModels"));
  }

  private EditorCell createConstant_ouom3r_j0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "No MAQCII File (evaluate statistics to develop)");
    editorCell.setCellId("Constant_ouom3r_j0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static boolean renderingCondition_ouom3r_a9a(SNode node, EditorContext editorContext) {
    return isEmptyString(SPropertyOperations.getString(node, "maqciiFile")) && SPropertyOperations.getInteger(node, "numberModels") != 0;
  }

  private EditorCell createCollection_ouom3r_k0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createFlow(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_k0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ouom3r_a01a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ouom3r_b01a(editorContext, node));
    return editorCell;
  }

  private static boolean renderingCondition_ouom3r_a01a(SNode node, EditorContext editorContext) {
    return isNotEmptyString(SPropertyOperations.getString(node, "maqciiFile"));
  }

  private EditorCell createConstant_ouom3r_a01a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "MAQCII File Location:");
    editorCell.setCellId("Constant_ouom3r_a01a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_ouom3r_b01a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("maqciiFile");
    provider.setNoTargetText("<no maqciiFile>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_maqciiFile");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createCollection_ouom3r_l0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_l0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.READ_ONLY, true);
    style.set(StyleAttributes.SELECTABLE, false);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    editorCell.getStyle().putAll(style);
    editorCell.setGridLayout(true);
    editorCell.addEditorCell(this.createCollection_ouom3r_a11a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ouom3r_b11a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ouom3r_c11a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ouom3r_d11a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ouom3r_e11a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ouom3r_f11a(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_ouom3r_g11a(editorContext, node));
    return editorCell;
  }

  private static boolean renderingCondition_ouom3r_a11a(SNode node, EditorContext editorContext) {
    return isNotEmptyString(SPropertyOperations.getString(node, "maqciiFile"));
  }

  private EditorCell createCollection_ouom3r_a11a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_a11a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ouom3r_a0l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_b0l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_c0l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_d0l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_e0l0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_a0l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "MCC:");
    editorCell.setCellId("Constant_ouom3r_a0l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_b0l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Min:");
    editorCell.setCellId("Constant_ouom3r_b0l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_c0l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("MCC");
    provider.setNoTargetText("<no MCC>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a2a11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("MCC");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a2a11a extends InlineCellProvider {
    public _Inline_ouom3r_a2a11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0c0l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0c0l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("min");
      provider.setNoTargetText("<no min>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_min");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createConstant_ouom3r_d0l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Max:");
    editorCell.setCellId("Constant_ouom3r_d0l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_e0l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("MCC");
    provider.setNoTargetText("<no MCC>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a4a11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("MCC");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a4a11a extends InlineCellProvider {
    public _Inline_ouom3r_a4a11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0e0l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0e0l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("max");
      provider.setNoTargetText("<no max>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_max");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createCollection_ouom3r_b11a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_b11a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ouom3r_a1l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_b1l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_c1l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_d1l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_e1l0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_a1l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "AUC:");
    editorCell.setCellId("Constant_ouom3r_a1l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_b1l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Min:");
    editorCell.setCellId("Constant_ouom3r_b1l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_c1l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("AUC");
    provider.setNoTargetText("<no AUC>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a2b11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("AUC");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a2b11a extends InlineCellProvider {
    public _Inline_ouom3r_a2b11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0c1l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0c1l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("min");
      provider.setNoTargetText("<no min>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_min_1");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createConstant_ouom3r_d1l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Max:");
    editorCell.setCellId("Constant_ouom3r_d1l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_e1l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("AUC");
    provider.setNoTargetText("<no AUC>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a4b11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("AUC");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a4b11a extends InlineCellProvider {
    public _Inline_ouom3r_a4b11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0e1l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0e1l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("max");
      provider.setNoTargetText("<no max>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_max_1");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createCollection_ouom3r_c11a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_c11a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ouom3r_a2l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_b2l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_c2l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_d2l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_e2l0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_a2l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "RMSE:");
    editorCell.setCellId("Constant_ouom3r_a2l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_b2l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Min:");
    editorCell.setCellId("Constant_ouom3r_b2l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_c2l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("RMSE");
    provider.setNoTargetText("<no RMSE>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a2c11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("RMSE");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a2c11a extends InlineCellProvider {
    public _Inline_ouom3r_a2c11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0c2l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0c2l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("min");
      provider.setNoTargetText("<no min>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_min_2");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createConstant_ouom3r_d2l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Max:");
    editorCell.setCellId("Constant_ouom3r_d2l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_e2l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("RMSE");
    provider.setNoTargetText("<no RMSE>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a4c11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("RMSE");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a4c11a extends InlineCellProvider {
    public _Inline_ouom3r_a4c11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0e2l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0e2l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("max");
      provider.setNoTargetText("<no max>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_max_2");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createCollection_ouom3r_d11a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_d11a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ouom3r_a3l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_b3l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_c3l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_d3l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_e3l0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_a3l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Accuracy:");
    editorCell.setCellId("Constant_ouom3r_a3l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_b3l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Min:");
    editorCell.setCellId("Constant_ouom3r_b3l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_c3l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("accuracy");
    provider.setNoTargetText("<no accuracy>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a2d11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("accuracy");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a2d11a extends InlineCellProvider {
    public _Inline_ouom3r_a2d11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0c3l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0c3l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("min");
      provider.setNoTargetText("<no min>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_min_3");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createConstant_ouom3r_d3l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Max:");
    editorCell.setCellId("Constant_ouom3r_d3l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_e3l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("accuracy");
    provider.setNoTargetText("<no accuracy>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a4d11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("accuracy");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a4d11a extends InlineCellProvider {
    public _Inline_ouom3r_a4d11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0e3l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0e3l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("max");
      provider.setNoTargetText("<no max>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_max_3");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createCollection_ouom3r_e11a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_e11a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ouom3r_a4l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_b4l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_c4l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_d4l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_e4l0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_a4l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Sensitivity:");
    editorCell.setCellId("Constant_ouom3r_a4l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_b4l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Min:");
    editorCell.setCellId("Constant_ouom3r_b4l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_c4l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("sensitivity");
    provider.setNoTargetText("<no sensitivity>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a2e11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("sensitivity");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a2e11a extends InlineCellProvider {
    public _Inline_ouom3r_a2e11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0c4l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0c4l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("min");
      provider.setNoTargetText("<no min>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_min_4");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createConstant_ouom3r_d4l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Max:");
    editorCell.setCellId("Constant_ouom3r_d4l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_e4l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("sensitivity");
    provider.setNoTargetText("<no sensitivity>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a4e11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("sensitivity");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a4e11a extends InlineCellProvider {
    public _Inline_ouom3r_a4e11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0e4l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0e4l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("max");
      provider.setNoTargetText("<no max>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_max_4");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createCollection_ouom3r_f11a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_f11a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ouom3r_a5l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_b5l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_c5l0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ouom3r_d5l0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_ouom3r_e5l0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_a5l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Specificity:");
    editorCell.setCellId("Constant_ouom3r_a5l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_ouom3r_b5l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Min:");
    editorCell.setCellId("Constant_ouom3r_b5l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_c5l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("specificity");
    provider.setNoTargetText("<no specificity>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a2f11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("specificity");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a2f11a extends InlineCellProvider {
    public _Inline_ouom3r_a2f11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0c5l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0c5l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("min");
      provider.setNoTargetText("<no min>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_min_5");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createConstant_ouom3r_d5l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Max:");
    editorCell.setCellId("Constant_ouom3r_d5l0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_ouom3r_e5l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("specificity");
    provider.setNoTargetText("<no specificity>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Result_Editor._Inline_ouom3r_a4f11a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("specificity");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_ouom3r_a4f11a extends InlineCellProvider {
    public _Inline_ouom3r_a4f11a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ouom3r_a0e5l0(editorContext, node);
    }

    private EditorCell createProperty_ouom3r_a0e5l0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("max");
      provider.setNoTargetText("<no max>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_max_5");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createJComponent_ouom3r_g11a(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Result_Editor._QueryFunction_JComponent_ouom3r_a6l0(node, editorContext), "_ouom3r_g11a");
    editorCell.setCellId("JComponent_ouom3r_g11a");
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_ouom3r_a6l0(final SNode node, final EditorContext editorContext) {
    return ChartViewer_Charts.panel(SPropertyOperations.getString(node, "maqciiFile"), SPropertyOperations.getString(node, "maqciiFile"));
  }

  private EditorCell createConstant_ouom3r_m0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "No Final Models (generate final models to develop)");
    editorCell.setCellId("Constant_ouom3r_m0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static boolean renderingCondition_ouom3r_a21a(SNode node, EditorContext editorContext) {
    return !(SPropertyOperations.getBoolean(node, "finalModels")) && SPropertyOperations.getInteger(node, "numberModels") != 0;
  }

  private EditorCell createCollection_ouom3r_n0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ouom3r_n0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ouom3r_a31a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ouom3r_b31a(editorContext, node));
    return editorCell;
  }

  private static boolean renderingCondition_ouom3r_a31a(SNode node, EditorContext editorContext) {
    return SPropertyOperations.getBoolean(node, "finalModels");
  }

  private EditorCell createConstant_ouom3r_a31a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Number of Final Models:");
    editorCell.setCellId("Constant_ouom3r_a31a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_ouom3r_b31a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("numberFinalModels");
    provider.setNoTargetText("<no numberFinalModels>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_numberFinalModels");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    if (Result_Editor._StyleParameter_QueryFunction_ouom3r_a1b31a((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode()))) {
      {
        Style styleToPut;
        styleToPut = new StyleImpl();
        EditingStyles_StyleSheet.apply_RedText(styleToPut, editorCell);
        style.putAll(styleToPut);
      }
    }
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private static boolean _StyleParameter_QueryFunction_ouom3r_a1b31a(EditorContext editorContext, SNode node) {
    return SPropertyOperations.getInteger(node, "numberModels") != SPropertyOperations.getInteger(node, "numberFinalModels");
  }

  private EditorCell createConstant_ouom3r_o0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_ouom3r_o0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_ouom3r_a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name_1");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
