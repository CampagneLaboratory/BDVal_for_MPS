package org.campagnelab.bdval.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_Endpoint_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Endpoint_NonTypesystemRule() {
  }

  public void applyRule(final SNode dataSet, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final List<String> validEndpoints = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(SLinkOperations.getTargets(dataSet, "endpoint", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode endpoint) {
        ListSequence.fromList(validEndpoints).addElement(SPropertyOperations.getString(endpoint, "name"));
      }
    });
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(dataSet, "input", true), "sample", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode sampleId) {
        if (!(ListSequence.fromList(validEndpoints).contains(SPropertyOperations.getString(SLinkOperations.getTarget(sampleId, "endpoint", true), "name"))) && isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(sampleId, "endpoint", true), "name"))) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(sampleId, "Invalid Endpoint", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "1121933592014324333", null, errorTarget);
          }
        }
      }
    });
  }

  public String getApplicableConceptFQName() {
    return "org.campagnelab.bdval.structure.DataSet";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
