package org.campagnelab.bdval.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.messageTargets.ReferenceMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_expanded_Approach_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_expanded_Approach_NonTypesystemRule() {
  }

  public void applyRule(final SNode approach, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<SNode> methodList = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(approach, "featureSelectionInfo", true), "strategy", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "step1", true) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "step1", true);
      }
    }).toListSequence();
    ListSequence.fromList(methodList).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(approach, "featureSelectionInfo", true), "strategy", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "step2", true) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "step2", true);
      }
    }).toListSequence());
    ListSequence.fromList(methodList).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(approach, "featureSelectionInfo", true), "strategy", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "option", true) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "option", true);
      }
    }).toListSequence());
    ListSequence.fromList(methodList).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(approach, "classificationInfo", true), "classification", true)));

    SNode fsProperties = SLinkOperations.getTarget(SLinkOperations.getTarget(approach, "featureSelectionInfo", true), "parameters", true);
    SNode csProperties = SLinkOperations.getTarget(SLinkOperations.getTarget(approach, "classificationInfo", true), "classificationProperties", true);

    for (SNode method : ListSequence.fromList(methodList)) {
      if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.SVMIterative")) {
        if ((SLinkOperations.getTarget(fsProperties, "svmIterative", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("svmIterative");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fsProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673596204", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.Ttest")) {
        if ((SLinkOperations.getTarget(fsProperties, "ttest", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("ttest");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fsProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673596630", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.GeneticAlgorithm")) {
        if ((SLinkOperations.getTarget(fsProperties, "geneticAlgorithm", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("geneticAlgorithm");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fsProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673597056", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.FoldChange")) {
        if ((SLinkOperations.getTarget(fsProperties, "foldchange", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("foldchange");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fsProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673603926", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.KendallTau")) {
        if ((SLinkOperations.getTarget(fsProperties, "kendallTau", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("kendallTau");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fsProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673631738", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.Permutation")) {
        if ((SLinkOperations.getTarget(fsProperties, "permutation", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("permutation");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fsProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673608493", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.MinMax")) {
        if ((SLinkOperations.getTarget(fsProperties, "minMax", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("minMax");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fsProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673611590", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.CoxReg")) {
        if ((SLinkOperations.getTarget(fsProperties, "coxReg", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("coxReg");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fsProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673615146", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.Pathway")) {
        if ((SLinkOperations.getTarget(fsProperties, "pathways", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("pathways");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fsProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673618243", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.SVM")) {
        if ((SLinkOperations.getTarget(csProperties, "svmProperties", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("svmProperties");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(csProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673621340", null, errorTarget);
          }
        }
      } else if (SNodeOperations.isInstanceOf(method, "org.campagnelab.bdval.structure.SVMTuneC")) {
        if ((SLinkOperations.getTarget(csProperties, "svmTuneCProperties", true) == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget("svmTuneCProperties");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(csProperties, "Must expand, press enter", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "915377476673624437", null, errorTarget);
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "org.campagnelab.bdval.structure.ModelingApproaches";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
