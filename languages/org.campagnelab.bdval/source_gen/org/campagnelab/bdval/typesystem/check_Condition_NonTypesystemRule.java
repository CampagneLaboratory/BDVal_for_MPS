package org.campagnelab.bdval.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_Condition_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Condition_NonTypesystemRule() {
  }

  public void applyRule(final SNode condition, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<String> evals = ListSequence.fromListAndArray(new ArrayList<String>(), "Feature Selection Fold-true", "Feature Selection Fold-false", "Baseline", "Naive Bayes", "Logit Boost", "Logistic", "Random Forest", "K Star", "Whole Chip", "Baseline Tune C", "Foldchange Genetic Algorithm", "Foldchange SVM Global", "Foldchange SVM Iterative", "Full Genetic Algorithm", "Genelist Genetic Algorithm", "Genelist SVM Global", "Genelist SVM Global Tune C", "Min/Max SVM Global", "Pathways T-test SVM Global", "Pathways Tune C", "Pathways Baseline", "SVM Iterative", "T-test Genetic Algorithm", "T-test SVM Global", "T-test SVM Iterative");
    List<String> paths = ListSequence.fromListAndArray(new ArrayList<String>(), "Feature Selection Fold-true", "Feature Selection Fold-false", "Baseline", "Baseline Tune C", "Foldchange Genetic Algorithm", "Foldchange SVM Global", "Foldchange SVM Iterative", "Full Genetic Algorithm", "Genelist Genetic Algorithm", "Genelist SVM Global", "Genelist SVM Global Tune C", "Min/Max SVM Global", "Pathways Build Pathway Components", "Pathways T-test SVM Global", "Pathways Tune C", "Pathways Baseline", "SVM Iterative", "T-test Genetic Algorithm", "T-test SVM Global", "T-test SVM Iterative");
    List<String> genetics = ListSequence.fromListAndArray(new ArrayList<String>(), "Feature Selection Fold-true", "Feature Selection Fold-false", "Baseline", "Whole Chip", "Baseline Tune C", "Foldchange SVM Global", "Foldchange SVM Iterative", "Foldchange Genetic Algorithm", "Full Genetic Algorithm", "Genelist Genetic Algorithm", "Genelist SVM Global", "Genelist SVM Global Tune C", "Min/Max SVM Global", "Pathways T-test SVM Global", "Pathways Tune C", "Pathways Baseline", "SVM Iterative", "T-test Genetic Algorithm", "T-test SVM Global", "T-test SVM Iterative");
    List<String> tuneCs = ListSequence.fromListAndArray(new ArrayList<String>(), "Feature Selection Fold-true", "Feature Selection Fold-false", "Baseline", "Whole Chip", "Baseline Tune C", "Foldchange Genetic Algorithm", "Foldchange SVM Global", "Foldchange SVM Iterative", "Full Genetic Algorithm", "Genelist Genetic Algorithm", "Genelist SVM Global", "Genelist SVM Global Tune C", "Min/Max SVM Global", "Pathways T-test SVM Global", "Pathways Tune C", "Pathways Baseline", "T-test Genetic Algorithm", "T-test SVM Global", "T-test SVM Iterative", "SVM Iterative");
    if (SNodeOperations.hasRole(SNodeOperations.getParent(condition), "org.campagnelab.bdval.structure.Properties", "evaluate") && !(ListSequence.fromList(evals).contains(SPropertyOperations.getString(condition, "name")))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(condition, "Evaluation Condition invald", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "290469645489377568", null, errorTarget);
      }
    }
    if (SNodeOperations.hasRole(SNodeOperations.getParent(condition), "org.campagnelab.bdval.structure.Properties", "pathway") && !(ListSequence.fromList(paths).contains(SPropertyOperations.getString(condition, "name")))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(condition, "Pathway Condition invalid", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "290469645489391681", null, errorTarget);
      }
    }
    if (SNodeOperations.hasRole(SNodeOperations.getParent(condition), "org.campagnelab.bdval.structure.Properties", "genetic") && !(ListSequence.fromList(genetics).contains(SPropertyOperations.getString(condition, "name")))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(condition, "Genetic Condition invalid", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "290469645489407088", null, errorTarget);
      }
    }
    if (SNodeOperations.hasRole(SNodeOperations.getParent(condition), "org.campagnelab.bdval.structure.Properties", "tuneC") && !(ListSequence.fromList(tuneCs).contains(SPropertyOperations.getString(condition, "name")))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(condition, "Tune C Condition invalid", "r:03143f03-46ae-4107-a067-34f5026aa223(org.campagnelab.bdval.typesystem)", "290469645489429046", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "org.campagnelab.bdval.structure.Condition";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
