package org.campagnelab.bdval.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public enum evaluateType {
  useFeatureSelectionTrue("useFeatureSelectionTrue", "useFeatureSelectionTrue"),
  useFeatureSelectionFalse("useFeatureSelectionFalse", "useFeatureSelectionFalse"),
  baseline("baseline", "baseline"),
  naiveBayes("naiveBayes", "naiveBayes"),
  logitBoost("logitBoost", "logitBoost"),
  logistic("logistic", "logisitc"),
  randomForest("randomForest", "randomForest"),
  kStar("kStar", "kStar"),
  wholeChip("wholeChip", "wholeChip"),
  baselineTuneC("baselineTuneC", "baselineTuneC"),
  foldchangeGeneticAlgorithm("foldchangeGeneticAlgorithm", "foldchangeGeneticAlgorithm"),
  foldchangeSvmGlobal("foldchangeSvmGlobal", "foldchangeSvmGlobal"),
  foldchangeSvmIterative("foldchangeSvmIterative", "foldchangeSvmIterative"),
  fullGeneticAlgorithm("fullGeneticAlgorithm", "fullGeneticAlgorithm"),
  genelistGeneticAlgorithm("genelistGeneticAlgorithm", "genelistGeneticAlgorithm"),
  genelistSvmGlobal("genelistSvmGlobal", "genelistSvmGlobal"),
  genelistSvmGlobalTuneC("genelistSvmGlobalTuneC", "genelistSvmGlobalTuneC"),
  minMaxSvmGlobal("minMaxSvmGlobal", "minMaxSvmGlobal"),
  pathwaysTtestSvmGlobal("pathwaysTtestSvmGlobal", "pathwaysTtestSvmGlobal"),
  pathwaysTuneC("pathwaysTuneC", "pathwaysTuneC"),
  pathwaysBaseline("pathwaysBaseline", "pathwaysBaseline"),
  svmIterative("svmIterative", "svmIterative"),
  ttestGeneticAlgorithm("ttestGeneticAlgorithm", "ttestGeneticAlgorithm"),
  ttestSvmGlobal("ttestSvmGlobal", "ttestSvmGlobal"),
  ttestSvmIterative("ttestSvmIterative", "ttestSvmIterative");

  private String myName;

  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return this.myValue;
  }

  public static List<evaluateType> getConstants() {
    List<evaluateType> list = ListSequence.fromList(new LinkedList<evaluateType>());
    ListSequence.fromList(list).addElement(evaluateType.useFeatureSelectionTrue);
    ListSequence.fromList(list).addElement(evaluateType.useFeatureSelectionFalse);
    ListSequence.fromList(list).addElement(evaluateType.baseline);
    ListSequence.fromList(list).addElement(evaluateType.naiveBayes);
    ListSequence.fromList(list).addElement(evaluateType.logitBoost);
    ListSequence.fromList(list).addElement(evaluateType.logistic);
    ListSequence.fromList(list).addElement(evaluateType.randomForest);
    ListSequence.fromList(list).addElement(evaluateType.kStar);
    ListSequence.fromList(list).addElement(evaluateType.wholeChip);
    ListSequence.fromList(list).addElement(evaluateType.baselineTuneC);
    ListSequence.fromList(list).addElement(evaluateType.foldchangeGeneticAlgorithm);
    ListSequence.fromList(list).addElement(evaluateType.foldchangeSvmGlobal);
    ListSequence.fromList(list).addElement(evaluateType.foldchangeSvmIterative);
    ListSequence.fromList(list).addElement(evaluateType.fullGeneticAlgorithm);
    ListSequence.fromList(list).addElement(evaluateType.genelistGeneticAlgorithm);
    ListSequence.fromList(list).addElement(evaluateType.genelistSvmGlobal);
    ListSequence.fromList(list).addElement(evaluateType.genelistSvmGlobalTuneC);
    ListSequence.fromList(list).addElement(evaluateType.minMaxSvmGlobal);
    ListSequence.fromList(list).addElement(evaluateType.pathwaysTtestSvmGlobal);
    ListSequence.fromList(list).addElement(evaluateType.pathwaysTuneC);
    ListSequence.fromList(list).addElement(evaluateType.pathwaysBaseline);
    ListSequence.fromList(list).addElement(evaluateType.svmIterative);
    ListSequence.fromList(list).addElement(evaluateType.ttestGeneticAlgorithm);
    ListSequence.fromList(list).addElement(evaluateType.ttestSvmGlobal);
    ListSequence.fromList(list).addElement(evaluateType.ttestSvmIterative);
    return list;
  }

  public static evaluateType getDefault() {
    return null;
  }

  public static evaluateType parseValue(String value) {
    if (value == null) {
      return evaluateType.getDefault();
    }
    if (value.equals(evaluateType.useFeatureSelectionTrue.getValueAsString())) {
      return evaluateType.useFeatureSelectionTrue;
    }
    if (value.equals(evaluateType.useFeatureSelectionFalse.getValueAsString())) {
      return evaluateType.useFeatureSelectionFalse;
    }
    if (value.equals(evaluateType.baseline.getValueAsString())) {
      return evaluateType.baseline;
    }
    if (value.equals(evaluateType.naiveBayes.getValueAsString())) {
      return evaluateType.naiveBayes;
    }
    if (value.equals(evaluateType.logitBoost.getValueAsString())) {
      return evaluateType.logitBoost;
    }
    if (value.equals(evaluateType.logistic.getValueAsString())) {
      return evaluateType.logistic;
    }
    if (value.equals(evaluateType.randomForest.getValueAsString())) {
      return evaluateType.randomForest;
    }
    if (value.equals(evaluateType.kStar.getValueAsString())) {
      return evaluateType.kStar;
    }
    if (value.equals(evaluateType.wholeChip.getValueAsString())) {
      return evaluateType.wholeChip;
    }
    if (value.equals(evaluateType.baselineTuneC.getValueAsString())) {
      return evaluateType.baselineTuneC;
    }
    if (value.equals(evaluateType.foldchangeGeneticAlgorithm.getValueAsString())) {
      return evaluateType.foldchangeGeneticAlgorithm;
    }
    if (value.equals(evaluateType.foldchangeSvmGlobal.getValueAsString())) {
      return evaluateType.foldchangeSvmGlobal;
    }
    if (value.equals(evaluateType.foldchangeSvmIterative.getValueAsString())) {
      return evaluateType.foldchangeSvmIterative;
    }
    if (value.equals(evaluateType.fullGeneticAlgorithm.getValueAsString())) {
      return evaluateType.fullGeneticAlgorithm;
    }
    if (value.equals(evaluateType.genelistGeneticAlgorithm.getValueAsString())) {
      return evaluateType.genelistGeneticAlgorithm;
    }
    if (value.equals(evaluateType.genelistSvmGlobal.getValueAsString())) {
      return evaluateType.genelistSvmGlobal;
    }
    if (value.equals(evaluateType.genelistSvmGlobalTuneC.getValueAsString())) {
      return evaluateType.genelistSvmGlobalTuneC;
    }
    if (value.equals(evaluateType.minMaxSvmGlobal.getValueAsString())) {
      return evaluateType.minMaxSvmGlobal;
    }
    if (value.equals(evaluateType.pathwaysTtestSvmGlobal.getValueAsString())) {
      return evaluateType.pathwaysTtestSvmGlobal;
    }
    if (value.equals(evaluateType.pathwaysTuneC.getValueAsString())) {
      return evaluateType.pathwaysTuneC;
    }
    if (value.equals(evaluateType.pathwaysBaseline.getValueAsString())) {
      return evaluateType.pathwaysBaseline;
    }
    if (value.equals(evaluateType.svmIterative.getValueAsString())) {
      return evaluateType.svmIterative;
    }
    if (value.equals(evaluateType.ttestGeneticAlgorithm.getValueAsString())) {
      return evaluateType.ttestGeneticAlgorithm;
    }
    if (value.equals(evaluateType.ttestSvmGlobal.getValueAsString())) {
      return evaluateType.ttestSvmGlobal;
    }
    if (value.equals(evaluateType.ttestSvmIterative.getValueAsString())) {
      return evaluateType.ttestSvmIterative;
    }
    return evaluateType.getDefault();
  }

  private String myValue;

  evaluateType(String name, String value) {
    this.myName = name;
    this.myValue = value;
  }

  public String getValue() {
    return this.myValue;
  }
}
