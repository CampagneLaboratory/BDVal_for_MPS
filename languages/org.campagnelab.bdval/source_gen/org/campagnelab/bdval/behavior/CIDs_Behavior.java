package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.FileReader;
import java.io.File;
import java.io.BufferedReader;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class CIDs_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_load_4345048909863010217(SNode thisNode) {
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "mismatches", true)).clear();
    SPropertyOperations.set(thisNode, "numberOfSamples", null);
    try {
      FileReader reader = new FileReader(new File(SPropertyOperations.getString(thisNode, "cidsFileName")));
      BufferedReader datasetReader = new BufferedReader(reader);
      String line = datasetReader.readLine();
      String[] lineArray = line.split("\t");
      int cols = lineArray.length;
      if (cols != 2) {
        throw new IllegalArgumentException();
      }
      CIDs_Behavior.call_getCidsEndpts_3367122381605517505(thisNode, datasetReader);
      CIDs_Behavior.call_displayCids_3367122381623847914(thisNode);
    } catch (Exception e) {
      throw new IllegalArgumentException("CIDs load failed");
    }
  }

  public static void call_getCidsEndpts_3367122381605517505(SNode thisNode, BufferedReader cidsTable) {
    try {
      SNode dataSet = SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.DataSet");
      ListSequence.fromList(SLinkOperations.getTargets(dataSet, "endpoint", true)).clear();
      Iterable<SNode> sampleIds = SLinkOperations.getTargets(SLinkOperations.getTarget(dataSet, "input", true), "sampleId", true);
      int cidsSamples = 0;
      int mismatches = 0;
      String line;
      String endpoint;
      final Wrappers._T<String> id = new Wrappers._T<String>();
      String[] lineArray;
      List<String> distinctEndpts = ListSequence.fromList(new ArrayList<String>());
      while ((line = cidsTable.readLine()) != null) {
        cidsSamples++;
        lineArray = line.split("\t");
        id.value = lineArray[1];
        SNode matchingId = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(dataSet, "input", true), "sampleId", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode sampleId) {
            return SPropertyOperations.getString(sampleId, "name").matches(id.value);
          }
        });
        if ((matchingId != null)) {
          endpoint = lineArray[0];
          SPropertyOperations.set(SLinkOperations.getTarget(matchingId, "endpoint", true), "name", endpoint);
          if (!(ListSequence.fromList(distinctEndpts).contains(endpoint))) {
            SNode endptNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.Endpoint", null);
            SPropertyOperations.set(endptNode, "name", endpoint);
            ListSequence.fromList(SLinkOperations.getTargets(dataSet, "endpoint", true)).addElement(endptNode);
            ListSequence.fromList(distinctEndpts).addElement(endpoint);
          }
        } else {
          SNode mismatch = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.SampleId", null);
          SPropertyOperations.set(mismatch, "name", id.value);
          ListSequence.fromList(SLinkOperations.getTargets(thisNode, "mismatches", true)).addElement(mismatch);
        }
      }
      SPropertyOperations.set(thisNode, "numberOfSamples", "" + (cidsSamples));
    } catch (Exception e) {
      throw new IllegalArgumentException();
    }
  }

  public static void call_displayCids_3367122381623847914(final SNode thisNode) {
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "displayRow", true)).removeSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "displayRow", true)));
    final int setLength = Input_Behavior.call_getDisplayLength_3367122381624659193(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.DataSet"), "input", true));
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.DataSet"), "input", true), "sampleId", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode sampleId) {
        SNode rowNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayRow", null);
        SNode idNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayValue", null);
        SNode endptNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.Endpoint", null);
        SPropertyOperations.set(idNode, "value", Input_Behavior.call_reformatString_3367122381603806186(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.DataSet"), "input", true), SPropertyOperations.getString(sampleId, "name"), setLength));
        SPropertyOperations.set(endptNode, "name", SPropertyOperations.getString(SLinkOperations.getTarget(sampleId, "endpoint", true), "name"));
        ListSequence.fromList(SLinkOperations.getTargets(rowNode, "displayValue", true)).addElement(idNode);
        SLinkOperations.setTarget(rowNode, "endpoint", endptNode, true);
        ListSequence.fromList(SLinkOperations.getTargets(thisNode, "displayRow", true)).addElement(rowNode);
      }
    });
  }
}
