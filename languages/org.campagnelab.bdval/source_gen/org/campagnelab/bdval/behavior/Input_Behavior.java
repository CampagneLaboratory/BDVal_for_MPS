package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.bdval.DAVMode;
import edu.mssm.crover.tables.Table;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Iterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class Input_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_load_7052920786130144602(SNode thisNode) {
    SPropertyOperations.set(thisNode, "numberOfSamples", null);
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "sample", true)).clear();
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "displayRow", true)).clear();
    try {
      final DAVMode davMode = new DAVMode();
      Table inputTable = davMode.getReadInputFile(SPropertyOperations.getString(thisNode, "inputFileName"));
      int cols = inputTable.getColumnNumber();
      Input_Behavior.call_getInputIds_7052920786130389579(thisNode, inputTable, cols);
      Input_Behavior.call_getInputDisplay_3367122381600071702(thisNode, inputTable, cols);
      // <node> 
    } catch (Exception e) {
      throw new IllegalArgumentException("Illegal Input File");
    }
  }

  public static void call_getInputIds_7052920786130389579(SNode thisNode, Table inputTable, int cols) {
    int counter = 1;
    while (counter < cols) {
      String idString = inputTable.getIdentifier(counter);
      SNode idNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.Sample", null);
      SPropertyOperations.set(idNode, "name", idString);
      SNode endpointNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.Endpoint", null);
      SLinkOperations.setTarget(idNode, "endpoint", endpointNode, true);
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "sample", true)).addElement(idNode);
      counter++;
    }
    SPropertyOperations.set(thisNode, "numberOfSamples", "" + (counter - 1));
  }

  public static void call_getInputDisplay_3367122381600071702(SNode thisNode, Table inputTable, int cols) {
    int rows = inputTable.getRowNumber();
    int colMax = 8;
    int rowMax = 10;
    if (cols < colMax) {
      colMax = cols;
    }
    if (rows < rowMax) {
      rowMax = rows;
    }
    // Gets the first row 
    int colCounter = 0;
    int length = Input_Behavior.call_getDisplayLength_3367122381624659193(thisNode);
    SNode rowNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayRow", null);
    while (colCounter < colMax) {
      try {
        SNode valNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayValue", null);
        SPropertyOperations.set(valNode, "value", Input_Behavior.call_reformatString_3367122381603806186(thisNode, inputTable.getIdentifier(colCounter), length));
        ListSequence.fromList(SLinkOperations.getTargets(rowNode, "displayValue", true)).addElement(valNode);
      } catch (Exception e) {
        throw new Error();
      }
      colCounter++;
    }
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "displayRow", true)).addElement(rowNode);
    // Gets the following rows 
    Table.RowIterator rowIterator = inputTable.firstRow();
    rowIterator.next();
    int rowCounter = 1;
    while (rowCounter < rowMax) {
      rowNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayRow", null);
      colCounter = 0;
      while (colCounter < colMax) {
        try {
          SNode valNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayValue", null);
          SPropertyOperations.set(valNode, "value", Input_Behavior.call_reformatString_3367122381603806186(thisNode, inputTable.elementToString(colCounter, rowIterator), length));
          ListSequence.fromList(SLinkOperations.getTargets(rowNode, "displayValue", true)).addElement(valNode);
        } catch (Exception e) {
          throw new Error();
        }
        colCounter++;
      }
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "displayRow", true)).addElement(rowNode);
      rowIterator.next();
      rowCounter++;
    }
  }

  public static String call_reformatString_3367122381603806186(SNode thisNode, String originalString, int setLength) {
    int stringLength = originalString.length();
    int difference = stringLength - setLength;
    if (difference < 0) {
      return Input_Behavior.call_reformatString_3367122381603806186(thisNode, originalString.concat(" "), setLength);
    } else {
      return originalString.substring(0, setLength - 1);
    }
  }

  public static int call_getDisplayLength_3367122381624659193(SNode thisNode) {
    final Wrappers._int stringLength = new Wrappers._int(11);
    final Wrappers._int idLength = new Wrappers._int();
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "sample", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode sample) {
        idLength.value = SPropertyOperations.getString(sample, "name").length();
        if (idLength.value > stringLength.value) {
          stringLength.value = idLength.value;
        }
      }
    });
    return stringLength.value + 2;
  }

  public static void call_getEndpoints_3367122381622662959(SNode thisNode) {
    HashMap map = new HashMap(SLinkOperations.getTargets(thisNode, "sample", true).size());
    final List possibleEndpts = new ArrayList();
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "sample", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode sample) {
        String[] firstSplit = SPropertyOperations.getString(sample, "name").split("-");
        int length = firstSplit.length;
        for (int counter = 0; counter < length; counter++) {
          Sequence.fromIterable(Sequence.fromArray(firstSplit[counter].split("_"))).visitAll(new IVisitor<String>() {
            public void visit(String element) {
              possibleEndpts.add(element);
            }
          });
        }
      }
    });
    int listLength = possibleEndpts.size();
    for (int counter = 0; counter < listLength; counter++) {
      String str = possibleEndpts.get(counter).toString();
      if (map.containsKey(str)) {
        int value = Integer.parseInt(map.remove(str).toString());
        map.put(str, value++);
      } else {
        map.put(str, 1);
      }
    }
    Iterator<Object> substrings = map.keySet().iterator();
    while (substrings.hasNext()) {
      Object substring = substrings.next();
      if (((Integer) map.get(substring)) > 1) {
        SNode endptDecNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.Endpoint", null);
        SPropertyOperations.set(endptDecNode, "name", substring.toString());
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.DataSet"), "endpoint", true)).addElement(endptDecNode);
      }
    }
  }
}
