package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.bdval.DAVMode;
import edu.mssm.crover.tables.Table;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class Input_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_load_7052920786130144602(SNode thisNode) {
    SPropertyOperations.set(thisNode, "numberOfFeatures", null);
    SPropertyOperations.set(thisNode, "numberOfSamples", null);
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "sample", true)).clear();
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "displayRow", true)).clear();
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.DataSet"), "cids", true), "mismatches", true)).clear();
    try {
      final DAVMode davMode = new DAVMode();
      Table inputTable = davMode.getReadInputFile(SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "file", true), "fileLocation"));
      SPropertyOperations.set(thisNode, "numberOfFeatures", "" + (inputTable.getRowNumber() - 1));
      int cols = inputTable.getColumnNumber();
      Input_Behavior.call_getInputIds_7052920786130389579(thisNode, inputTable, cols);
      Input_Behavior.call_getInputDisplay_7860773101003978021(thisNode, inputTable, cols);
    } catch (Exception e) {
      throw new IllegalArgumentException("Illegal Input File: " + e);
    }
  }

  public static void call_getInputIds_7052920786130389579(SNode thisNode, Table inputTable, int cols) {
    int counter = 1;
    while (counter < cols) {
      String idString = inputTable.getIdentifier(counter);
      SNode sampleNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.Sample", null);
      SPropertyOperations.set(sampleNode, "name", idString);
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "sample", true)).addElement(sampleNode);
      counter++;
    }
    SPropertyOperations.set(thisNode, "numberOfSamples", "" + (counter - 1));
  }

  public static void call_getInputDisplay_7860773101003978021(SNode thisNode, Table inputTable, int cols) {
    int rows = inputTable.getRowNumber();
    int rowMax = 10;
    if (rows < rowMax) {
      rowMax = rows;
    }
    int colMax = 5;
    if (cols < colMax) {
      colMax = cols;
    }
    // First Row 
    Table.RowIterator rowIterator = inputTable.firstRow();
    SNode rowNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayRow", null);
    SNode valNode;
    for (int colCounter = 0; colCounter < colMax; colCounter++) {
      valNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayValue", null);
      SPropertyOperations.set(valNode, "value", inputTable.getIdentifier(colCounter));
      ListSequence.fromList(SLinkOperations.getTargets(rowNode, "displayValue", true)).addElement(valNode);
    }
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "displayRow", true)).addElement(rowNode);
    // Other Rows 
    for (int rowCounter = 1; rowCounter < rowMax; rowCounter++) {
      rowNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayRow", null);
      for (int colCounter = 0; colCounter < colMax; colCounter++) {
        valNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.DisplayValue", null);
        SPropertyOperations.set(valNode, "value", inputTable.elementToString(colCounter, rowIterator));
        ListSequence.fromList(SLinkOperations.getTargets(rowNode, "displayValue", true)).addElement(valNode);
      }
      rowIterator.next();
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "displayRow", true)).addElement(rowNode);
    }
  }
}
