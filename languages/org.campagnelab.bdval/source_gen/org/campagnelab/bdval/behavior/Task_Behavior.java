package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Task_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_getEndpoints_7083662764400846836(final SNode thisNode) {
    final Wrappers._int counter = new Wrappers._int(0);
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.DataSet"), "input", true), "sample", true)).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode sample) {
        SNode categoryNode = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "categoryReference", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode categoryRef) {
            return SPropertyOperations.getString(sample, "name").toLowerCase().contains(SPropertyOperations.getString(SLinkOperations.getTarget(categoryRef, "endpointCategory", false), "name").toLowerCase());
          }
        });
        if ((categoryNode != null)) {
          SLinkOperations.setTarget(sample, "category", categoryNode, false);
          counter.value++;
        }
      }
    });
    SPropertyOperations.set(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.DataSet"), "cids", true), "numberOfSamples", "" + (counter.value));
  }
}
