package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.FileReader;
import java.io.File;
import java.io.BufferedReader;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class Task_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_load_4345048909866934596(SNode thisNode) {
    SLinkOperations.getTargets(thisNode, "endpoint", true).removeAll(SLinkOperations.getTargets(thisNode, "endpoint", true));
    SPropertyOperations.set(thisNode, "numberOfEndptMismatches", null);
    SPropertyOperations.set(thisNode, "endpointCountMatch", null);
    try {
      FileReader reader = new FileReader(new File(SPropertyOperations.getString(thisNode, "taskFileName")));
      BufferedReader datasetReader = new BufferedReader(reader);
      String line = datasetReader.readLine();
      if (datasetReader.readLine() != null) {
        throw new IllegalArgumentException();
      }
      String[] lineArray = line.split("\t");
      int cols = lineArray.length;
      if ((cols % 2 == 0) || (cols < 3)) {
        throw new IllegalArgumentException();
      }
      Task_Behavior.call_getTaskEndpts_3367122381606179295(thisNode, lineArray, cols);
    } catch (Exception e) {
      throw new IllegalArgumentException("Task load failed");
    }
  }

  public static void call_getTaskEndpts_3367122381606179295(SNode thisNode, String[] lineArray, int cols) {
    int max = (cols - 1) / 2;
    int counter = 1;
    int matchCounter;
    boolean compareEndpts = true;
    while (counter <= max) {
      String endptString = lineArray[counter];
      SNode endptNode = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.Endpoint", null);
      SPropertyOperations.set(endptNode, "name", endptString);
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "endpoint", true)).addElement(endptNode);
      matchCounter = 0;
      compareEndpts = (Integer.parseInt(lineArray[max + counter]) == matchCounter) && compareEndpts;
      counter++;
    }
    SPropertyOperations.set(thisNode, "endpointCountMatch", "" + (compareEndpts));
  }
}
