package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Sample_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_updateSamples_7083662764408749188(SNode thisNode) {
    final SNode cids = SLinkOperations.getTarget(SNodeOperations.getAncestor(thisNode, "org.campagnelab.bdval.structure.DataSet", false, false), "cids", true);
    final Wrappers._int counter = new Wrappers._int(0);
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.Input"), "sample", true)).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode sample) {
        SNode mismatch = ListSequence.fromList(SLinkOperations.getTargets(cids, "mismatches", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode node) {
            return SPropertyOperations.getString(node, "idWithSpaces") == SPropertyOperations.getString(sample, "idWithSpaces");
          }
        });
        ListSequence.fromList(SLinkOperations.getTargets(cids, "mismatches", true)).removeElement(mismatch);
        if ((SLinkOperations.getTarget(sample, "category", false) != null)) {
          counter.value++;
        }
      }
    });
    SPropertyOperations.set(cids, "numberOfSamples", "" + (counter.value));
  }
}
