package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Properties;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.File;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

public class Project_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_createFiles_290469645456423260(SNode thisNode) {
    String projectName = SPropertyOperations.getString(thisNode, "name").replaceAll("\\s", "");
    boolean proceed = true;
    proceed = Project_Behavior.call_createLocalProperties_7083662764418572584(thisNode, projectName, proceed);
    proceed = Project_Behavior.call_createProperties_290469645499580654(thisNode, projectName, proceed);
    Project_Behavior.call_createXML_7083662764442215124(thisNode, projectName, proceed);
  }

  public static boolean call_createLocalProperties_7083662764418572584(SNode thisNode, String projectName, boolean proceed) {
    String fileName = SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "properties", true), "outputLocation") + "/" + projectName + "/" + projectName + "-local.properties";
    if (proceed && DataSet_Behavior.call_checkFile_7083662764406992609(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "dataset", true)).first(), fileName)) {
      try {
        Properties prop = new Properties();
        OutputStream output = new FileOutputStream(new File(fileName));
        prop.setProperty("eval-dataset-root", SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "properties", true), "outputLocation") + "/" + SPropertyOperations.getString(thisNode, "name").replaceAll("\\s", ""));
        prop.setProperty("computer.type", SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "properties", true), "computerType"));
        prop.setProperty("server.thread-number", "" + SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "threadsServer"));
        prop.setProperty("server.memory", "-Xmx" + SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "memoryServer") + "m");
        prop.setProperty("desktop.thread-number", "" + SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "threadsDesktop"));
        prop.setProperty("desktop.memory", "-Xmx" + SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "memoryServer") + "m");
        prop.store(output, SPropertyOperations.getString(thisNode, "name") + " Local Properties");
        return true;
      } catch (Exception e) {
        throw new Error("Error creating local properties file");
      }
    } else {
      return false;
    }
  }

  public static boolean call_createProperties_290469645499580654(SNode thisNode, final String projectName, boolean proceed) {
    String fileName = SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "properties", true), "outputLocation") + "/" + projectName + "/" + projectName + ".properties";
    if (proceed && DataSet_Behavior.call_checkFile_7083662764406992609(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "dataset", true)).first(), fileName)) {
      try {
        final Properties prop = new Properties();
        OutputStream output = new FileOutputStream(new File(fileName));
        final Wrappers._T<String> datasetName = new Wrappers._T<String>();
        final String root = "${eval-dataset-root}";
        ListSequence.fromList(SLinkOperations.getTargets(thisNode, "dataset", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode dataset) {
            datasetName.value = DataSet_Behavior.call_getName_290469645480322571(dataset);
            prop.setProperty(datasetName.value + ".dataset-name", projectName);
            prop.setProperty(datasetName.value + ".dataset-file", root + "/input/" + new File(SPropertyOperations.getString(SLinkOperations.getTarget(dataset, "input", true), "fileName")).getName());
            prop.setProperty(datasetName.value + ".cids-file", root + "/cids/" + datasetName.value + ".cids");
            prop.setProperty(datasetName.value + ".tasks-file", root + "/tasks/" + datasetName.value + ".tasks");
            prop.setProperty(datasetName.value + ".training.test-samples", "FILL THIS IN");
            prop.setProperty(datasetName.value + ".training.true-labels", "FILL THIS IN");
            prop.setProperty(datasetName.value + ".test.test-samples", "FILL THIS IN");
            prop.setProperty(datasetName.value + ".test.true-labels", "FILL THIS IN");
            prop.setProperty(datasetName.value + ".platform-file", root + "/platforms/" + new File(SPropertyOperations.getString(SLinkOperations.getTarget(dataset, "platform", true), "fileName")).getName());
            prop.setProperty(datasetName.value + ".do-process-gene-lists", "FILL THIS IN");
            prop.setProperty(datasetName.value + ".pathways-file", "FILL THIS IN");
            prop.setProperty(datasetName.value + ".gene-to-probes-file", "FILL THIS IN");
            prop.setProperty(datasetName.value + ".genelists", "FILL THIS IN");
            prop.setProperty(datasetName.value + ".floor", "FILL THIS IN");
            prop.setProperty(datasetName.value + ".array", "FILL THIS IN");
          }
        });
        // Finish bottom: custom ID/model 
        prop.store(output, SPropertyOperations.getString(thisNode, "name") + " Properties");
        return true;
      } catch (Exception e) {
        throw new Error("Error creating properties file");
      }
    } else {
      return false;
    }
  }

  public static void call_createXML_7083662764442215124(final SNode thisNode, String projectName, boolean proceed) {
    String fileName = SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "properties", true), "outputLocation") + "/" + projectName + "/" + projectName + ".xml";
    if (proceed && DataSet_Behavior.call_checkFile_7083662764406992609(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "dataset", true)).first(), fileName)) {
      try {
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
        final Document doc = docBuilder.newDocument();
        final Element project = doc.createElement("project");
        doc.appendChild(project);
        project.setAttribute("name", SPropertyOperations.getString(thisNode, "name").replaceAll("\\s", ""));
        project.setAttribute("default", "FILL THIS IN");
        project.setAttribute("basedir", "FILL THIS IN");
        Element dirname = doc.createElement("dirname");
        project.appendChild(dirname);
        dirname.setAttribute("property", "FILL THIS IN");
        dirname.setAttribute("file", "FILL THIS IN");
        Element importBuild = doc.createElement("import");
        project.appendChild(importBuild);
        importBuild.setAttribute("file", "FILL THIS IN");
        Element localProperties = doc.createElement("property");
        project.appendChild(localProperties);
        localProperties.setAttribute("file", "FILL THIS IN");
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "project-property-file", "FILL THIS IN");
        Element file = doc.createElement("property");
        project.appendChild(file);
        file.setAttribute("file", "${project-property-file}");
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "do-specific=gene-lists-only", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(thisNode, "properties", true), "doSpecificGeneListsOnly")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "enable-flooring", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(thisNode, "properties", true), "enableFlooring")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "ga-wrapper-population-size", String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "gaWrapperPopulationSize")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "ga-wrapper-number-of-iterations", String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "gaWrapperNumberOfIterations")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "performance-measured-maximized-by-GA", SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "properties", true), "performanceMeasureMaximized"));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "internal-CV-repeats", "--cv-repeats " + String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "internalRepeats")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "internal-CV-folds", String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "internalFolds")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "external-CV-repeats-number", String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "externalRepeats")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "external-CV-repeats", "--cv-repeats ${external-CV-repeats-number}");
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "external-CV-folds", String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "externalFolds")));
        final Wrappers._T<String> numFeatures = new Wrappers._T<String>("");
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "properties", true), "numFeatures", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode node) {
            numFeatures.value = numFeatures.value + "," + SPropertyOperations.getInteger(node, "value");
          }
        });
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "num-features", numFeatures.value.substring(1));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "max-intermediate-features", String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(thisNode, "properties", true), "maxIntermediateFeatures")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "use-probability", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(thisNode, "properties", true), "useProbability")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "fold-change-phi", String.valueOf(SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "properties", true), "foldChangePhi")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "ttest-alpha", SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "properties", true), "ttestAlpha"));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "pathway-aggregation-method", SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "properties", true), "pathwayAggregationMethod"));
        // TODO: Stuff with pathways until performance measures here! 
        // Normal targets 
        final Wrappers._T<String> datasetName = new Wrappers._T<String>();
        final Wrappers._T<String> execute = new Wrappers._T<String>();
        final Wrappers._T<String> allEndpoints = new Wrappers._T<String>("");
        ListSequence.fromList(SLinkOperations.getTargets(thisNode, "dataset", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode dataset) {
            datasetName.value = DataSet_Behavior.call_getName_290469645480322571(dataset);
            execute.value = String.valueOf(SPropertyOperations.getBoolean(dataset, "execute"));
            Project_Behavior.call_addNormalTarget_290469645480226173(thisNode, doc, project, datasetName.value, execute.value);
            allEndpoints.value = allEndpoints.value + " " + datasetName.value;
          }
        });
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, project, "all-endpoints", allEndpoints.value.substring(1));
        Element importBdval = doc.createElement("import");
        project.appendChild(importBdval);
        importBdval.setAttribute("file", "bdval.xml");
        // Gets evaluate target 
        Element evaluate = doc.createElement("target");
        project.appendChild(evaluate);
        evaluate.setAttribute("name", "evaluate");
        evaluate.setAttribute("description", "Run a complete Evaluation.");
        evaluate.setAttribute("depends", "prepare-bdval, rserve-status, tag-output-directory");
        Element evalDelete = doc.createElement("delete");
        evaluate.appendChild(evalDelete);
        evalDelete.setAttribute("file", "${statistics-output}");
        Element evalEcho = doc.createElement("echo");
        evaluate.appendChild(evalEcho);
        evalEcho.setAttribute("message", "Executing with ${num-threads} threads");
        Element evalSeq = doc.createElement("sequential");
        evaluate.appendChild(evalSeq);
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "use-feature-selection-fold=true", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "useFeatureSelectionFoldTrue")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "use-feature-selection-fold=false", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "useFeatureSelectionFoldFalse")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.baseline", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "baseline")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.naive-bayes", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "naiveBayes")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.logit-boost", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "naiveBayes")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.logistic", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "logistic")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.random-forest", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "randomForest")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.k-star", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "kStar")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.whole-chip", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "wholeChip")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.baseline-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "baselineTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.foldchange-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "foldchangeGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.foldchange-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "foldchangeSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.foldchange-svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "foldchangeSvmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.full-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "fullGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.genelist-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "genelistGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.genelist-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "genelistSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.genelist-svmglobal-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "genelistSvmGlobalTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.minmax-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "minMaxSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.pathways-ttest-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "pathwaysTtestSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.pathways-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "pathwaysTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.pathways.baseline", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "pathwaysBaseline")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "svmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.ttest-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "ttestGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.ttest-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "ttestSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, evalSeq, "do.ttest-svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "evaluate", true), "ttestSvmIterative")));
        Element evalExecute = doc.createElement("execute-all-endpoints");
        evalSeq.appendChild(evalExecute);
        Element evalAnt1 = doc.createElement("antcall");
        evaluate.appendChild(evalAnt1);
        evalAnt1.setAttribute("target", "process-model-conditions");
        Element evalAnt2 = doc.createElement("antcall");
        evaluate.appendChild(evalAnt2);
        evalAnt2.setAttribute("target", "zip-results");

        // Gets scan-series target 
        Element scanSeries = doc.createElement("target");
        project.appendChild(scanSeries);
        scanSeries.setAttribute("name", "scan-series");
        scanSeries.setAttribute("description", "Run a complete evaluation.");
        scanSeries.setAttribute("depends", "prepare-bdval, tag-output-directory");
        Element scanDelete = doc.createElement("delete");
        scanSeries.appendChild(scanDelete);
        scanDelete.setAttribute("file", "${statistics-output}");
        Element scanEcho = doc.createElement("echo");
        scanSeries.appendChild(scanEcho);
        scanEcho.setAttribute("message", "Executing with ${num-threads} threads");
        Element scanSeq = doc.createElement("sequential");
        scanSeries.appendChild(scanSeq);
        Element scanVar = doc.createElement("var");
        scanSeq.appendChild(scanVar);
        scanVar.setAttribute("name", "FILL THIS IN");
        scanVar.setAttribute("value", "FILL THIS IN");
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, scanSeq, "use-feature-selection-fold=true", "FILL THIS IN");
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, scanSeq, "use-feature-selection-fold=false", "FILL THIS IN");


        // Gets pathways target 
        Element pathways = doc.createElement("target");
        project.appendChild(pathways);
        pathways.setAttribute("name", "pathways");
        pathways.setAttribute("description", "Run pathways.");
        pathways.setAttribute("depends", "prepare-bdval, tag-output-directory");
        Element pathDelete = doc.createElement("delete");
        pathways.appendChild(pathDelete);
        pathDelete.setAttribute("file", "${statistics-output}");
        Element pathEcho = doc.createElement("echo");
        pathways.appendChild(pathEcho);
        pathEcho.setAttribute("message", "Executing with ${num-threads} threads");
        Element pathSeq = doc.createElement("sequential");
        pathways.appendChild(pathSeq);
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "use-feature-selection-fold=true", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "useFeatureSelectionFoldTrue")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "use-feature-selection-fold=false", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "useFeatureSelectionFoldFalse")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.baseline", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "baseline")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.baseline-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "baselineTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.foldchange-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "foldchangeGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.foldchange-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "foldchangeSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.foldchange-svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "foldchangeSvmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.full-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "fullGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.genelist-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "genelistGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.genelist-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "genelistSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.genelist-svmglobal-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "genelistSvmGlobalTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.minmax-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "minMaxSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.pathways-build-pathway-components", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "pathwaysBuildPathwayComponents")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.pathways-ttest-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "pathwaysTtestSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.pathways-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "pathwaysTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.pathways.baseline", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "pathwaysBaseline")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "svmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.ttest-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "ttestGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.ttest-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "ttestSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, pathSeq, "do.ttest-svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "pathway", true), "ttestSvmIterative")));
        Element pathExecute = doc.createElement("execute-all-endpoints");
        pathSeq.appendChild(pathExecute);
        Element pathAnt1 = doc.createElement("antcall");
        pathways.appendChild(pathAnt1);
        pathAnt1.setAttribute("target", "process-model-conditions");
        Element pathAnt2 = doc.createElement("antcall");
        pathways.appendChild(pathAnt2);
        pathAnt2.setAttribute("target", "zip-results");
        // Gets genetic algorithm target 
        Element genetic = doc.createElement("target");
        project.appendChild(genetic);
        genetic.setAttribute("name", "genetic-algorithm");
        genetic.setAttribute("description", "Run Genetic Algorithm.");
        genetic.setAttribute("depends", "prepare-bdval, tag-output-directory");
        Element geneDelete = doc.createElement("delete");
        genetic.appendChild(geneDelete);
        geneDelete.setAttribute("file", "${statistics-output}");
        Element geneEcho = doc.createElement("echo");
        genetic.appendChild(geneEcho);
        geneEcho.setAttribute("message", "Executing with ${num-threads} threads");
        Element geneSeq = doc.createElement("sequential");
        genetic.appendChild(geneSeq);
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "use-feature-selection-fold=true", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "useFeatureSelectionFoldTrue")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "use-feature-selection-fold=false", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "useFeatureSelectionFoldFalse")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.baseline", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "baseline")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.whole-chip", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "wholeChip")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.baseline-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "baselineTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.foldchange-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "foldchangeSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.foldchange-svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "foldchangeSvmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.genelist-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "genelistSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.genelist-svmglobal-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "genelistSvmGlobalTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.minmax-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "minMaxSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.pathways-ttest-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "pathwaysTtestSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.pathways-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "pathwaysTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.pathways.baseline", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "pathwaysBaseline")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "svmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.ttest-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "ttestSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.ttest-svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "ttestSvmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.full-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "fullGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.ttest-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "ttestGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.foldchange-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "foldchangeGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, geneSeq, "do.genelist-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "genetic", true), "genelistGeneticAlgorithm")));
        Element geneExecute = doc.createElement("execute-all-endpoints");
        geneSeq.appendChild(geneExecute);
        Element geneAnt1 = doc.createElement("antcall");
        genetic.appendChild(geneAnt1);
        geneAnt1.setAttribute("target", "process-model-conditions");
        Element geneAnt2 = doc.createElement("antcall");
        genetic.appendChild(geneAnt2);
        geneAnt2.setAttribute("target", "zip-results");
        // Gets tune-C target 
        Element tuneC = doc.createElement("target");
        project.appendChild(tuneC);
        tuneC.setAttribute("name", "tune-C");
        tuneC.setAttribute("description", "Try a few values of cost paramet C with baseline and gene lists.");
        tuneC.setAttribute("depends", "prepare-bdval, tag-output-directory");
        Element tuneDelete = doc.createElement("delete");
        tuneC.appendChild(tuneDelete);
        tuneDelete.setAttribute("file", "${statistics-output}");
        Element tuneEcho = doc.createElement("echo");
        tuneC.appendChild(tuneEcho);
        tuneEcho.setAttribute("message", "Executing with ${num-threads} threads");
        Element tuneSeq = doc.createElement("sequential");
        tuneC.appendChild(tuneSeq);
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "use-feature-selection-fold=true", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "useFeatureSelectionFoldTrue")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "use-feature-selection-fold=false", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "useFeatureSelectionFoldFalse")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.baseline", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "baseline")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.whole-chip", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "wholeChip")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.foldchange-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "foldchangeGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.foldchange-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "foldchangeSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.foldchange-svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "foldchangeSvmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.full-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "fullGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.genelist-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "genelistGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.genelist-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "genelistSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.minmax-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "minMaxSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.pathways-ttest-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "pathwaysTtestSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.pathways.baseline", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "pathwaysBaseline")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "svmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.ttest-genetic-algorithm", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "ttestGeneticAlgorithm")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.ttest-svmglobal", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "ttestSvmGlobal")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.ttest-svmiterative", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "ttestSvmIterative")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.pathways-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "pathwaysTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.baseline-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "baselineTuneC")));
        Project_Behavior.call_addProperty_290469645458227196(thisNode, doc, tuneSeq, "do.genelist-svmglobal-tune-C", String.valueOf(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "properties", true), "tuneC", true), "genelistSvmGlobalTuneC")));
        Element tuneExecute = doc.createElement("execute-all-endpoints");
        tuneSeq.appendChild(tuneExecute);
        Element tuneAnt1 = doc.createElement("antcall");
        tuneC.appendChild(tuneAnt1);
        tuneAnt1.setAttribute("target", "process-model-conditions");
        Element tuneAnt2 = doc.createElement("antcall");
        tuneC.appendChild(tuneAnt2);
        tuneAnt2.setAttribute("target", "zip-results");
        // Generate final models 
        Element finalModels = doc.createElement("target");
        project.appendChild(finalModels);
        finalModels.setAttribute("name", "generate-list-final-models");
        finalModels.setAttribute("description", "Calculate feature consensus across multiple feature selection strategies and generate models with consensus features on the whole training set.");
        Element finalList = doc.createElement("generate-final-models-from-list");
        finalModels.appendChild(finalList);
        finalList.setAttribute("results-list", "FILL THIS IN");
        // Writes file 
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(new File(fileName));
        transformer.transform(source, result);
      } catch (Exception e) {
        throw new Error("Error creating xml file");
      }
    }
  }

  public static void call_addProperty_290469645458227196(SNode thisNode, Document doc, Element root, String name, String value) {
    Element elem = doc.createElement("property");
    root.appendChild(elem);
    elem.setAttribute("name", name);
    elem.setAttribute("value", value);
  }

  public static void call_addNormalTarget_290469645480226173(SNode thisNode, Document doc, Element root, String datasetName, String execute) {
    Element elem = doc.createElement("var");
    root.appendChild(elem);
    elem.setAttribute("name", "do." + datasetName);
    elem.setAttribute("value", execute);
  }
}
