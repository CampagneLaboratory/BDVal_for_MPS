package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.HashMap;
import java.io.FileWriter;
import java.io.PrintWriter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import java.util.ArrayList;

public class DataSet_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_generateFiles_6032947574604950587(SNode thisNode) {
    String datasetName = SPropertyOperations.getString(thisNode, "name").replaceAll("\\s", "_");
    File folder = new File(SPropertyOperations.getString(thisNode, "outputLocation") + "/" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.Project"), "name").replaceAll("\\s", "_"));
    folder.mkdirs();
    HashMap endpointMap = DataSet_Behavior.call_createCIDs_6032947574604951771(thisNode, folder, datasetName);
    DataSet_Behavior.call_createTask_6032947574607589325(thisNode, folder, endpointMap, datasetName);
  }

  public static HashMap call_createCIDs_6032947574604951771(SNode thisNode, File folder, String datasetName) {
    try {
      FileWriter file = new FileWriter(folder.toString() + "/" + datasetName + ".cids");
      final PrintWriter writer = new PrintWriter(file);
      writer.print("#fusion\t");
      writer.print("SampleId\t");
      final HashMap endpointMap = new HashMap(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "endpoint", true)).count());
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "endpoint", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode endpoint) {
          endpointMap.put(SPropertyOperations.getString(endpoint, "name"), 0);
        }
      });
      final Wrappers._int endpointCount = new Wrappers._int();
      final Wrappers._T<String> endpoint = new Wrappers._T<String>();
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "input", true), "sample", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode sample) {
          if (isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(sample, "endpoint", true), "name"))) {
            writer.println();
            endpoint.value = SPropertyOperations.getString(SLinkOperations.getTarget(sample, "endpoint", true), "name");
            writer.print(SPropertyOperations.getString(sample, "name") + "\t");
            writer.print(endpoint.value + "\t");
            endpointCount.value = Integer.parseInt(endpointMap.remove(endpoint.value).toString());
            endpointMap.put(endpoint.value, endpointCount.value + 1);
          }
        }
      });
      writer.close();
      file.close();
      return endpointMap;
    } catch (Exception e) {
      throw new Error("Error Printing CIDs File");
    }
  }

  public static void call_createTask_6032947574607589325(SNode thisNode, File folder, final HashMap endpointMap, String datasetName) {
    try {
      FileWriter file = new FileWriter(folder.toString() + "/" + datasetName + ".tasks");
      PrintWriter writer = new PrintWriter(file);
      writer.print(SPropertyOperations.getString(thisNode, "name") + "\t");
      final List<String> endpointNames = ListSequence.fromList(new ArrayList<String>());
      final List<String> endpointCounts = ListSequence.fromList(new ArrayList<String>());
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "endpoint", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode endpoint) {
          ListSequence.fromList(endpointNames).addElement(SPropertyOperations.getString(endpoint, "name"));
          ListSequence.fromList(endpointCounts).addElement(endpointMap.get(SPropertyOperations.getString(endpoint, "name")).toString());
        }
      });
      int size = ListSequence.fromList(endpointNames).count();
      for (int counter = 0; counter < size; counter++) {
        writer.print(ListSequence.fromList(endpointNames).getElement(counter) + "\t");
      }
      for (int counter = 0; counter < size; counter++) {
        writer.print(ListSequence.fromList(endpointCounts).getElement(counter) + "\t");
      }
      writer.close();
      file.close();
    } catch (Exception e) {
      throw new Error("Error Printing Task File");
    }
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
