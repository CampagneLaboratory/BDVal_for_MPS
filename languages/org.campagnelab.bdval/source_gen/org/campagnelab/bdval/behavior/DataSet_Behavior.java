package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.HashMap;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import java.util.ArrayList;

public class DataSet_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_updateEndpoints_6032947574610343807(final SNode thisNode) {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "input", true), "sampleId", true)).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode sampleId) {
        SNode displayRowNode = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "cids", true), "displayRow", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode row) {
            return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(row, "displayValue", true)).first(), "value") == SPropertyOperations.getString(sampleId, "name");
          }
        });
        SPropertyOperations.set(SLinkOperations.getTarget(sampleId, "endpoint", true), "name", SPropertyOperations.getString(SLinkOperations.getTarget(displayRowNode, "endpoint", true), "name"));
      }
    });
  }

  public static void call_generateFiles_6032947574604950587(SNode thisNode) {
    File folder = new File("/Users/vmb34/Desktop/" + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.Project"), "name").replaceAll("//s", "_"));
    folder.mkdirs();
    DataSet_Behavior.call_createCIDs_6032947574604951771(thisNode, folder);
  }

  public static void call_createCIDs_6032947574604951771(SNode thisNode, File folder) {
    try {
      FileWriter file = new FileWriter(folder.toString() + "/Cids.cids");
      final PrintWriter writer = new PrintWriter(file);
      writer.print("#fusion\t");
      writer.print("SampleId\t");
      final HashMap map = new HashMap(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "endpoint", true)).count());
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "endpoint", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode endpoint) {
          map.put(SPropertyOperations.getString(endpoint, "name"), 0);
        }
      });
      final Wrappers._int value = new Wrappers._int();
      final Wrappers._T<String> sample = new Wrappers._T<String>();
      final Wrappers._T<String> endpoint = new Wrappers._T<String>();
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "input", true), "sampleId", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode sampleId) {
          if (isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(sampleId, "endpoint", true), "name"))) {
            writer.println();
            sample.value = SPropertyOperations.getString(sampleId, "name");
            endpoint.value = SPropertyOperations.getString(SLinkOperations.getTarget(sampleId, "endpoint", true), "name");
            writer.print(sample.value + "\t");
            writer.print(endpoint.value + "\t");
            value.value = Integer.parseInt(map.remove(endpoint.value).toString());
            map.put(endpoint.value, value.value + 1);
          }
        }
      });
      writer.close();
      file.close();
      DataSet_Behavior.call_createTask_6032947574607589325(thisNode, folder, map);
    } catch (Exception e) {
      throw new Error("Error Printing CIDs File");
    }
  }

  public static void call_createTask_6032947574607589325(SNode thisNode, File folder, final HashMap map) {
    try {
      FileWriter file = new FileWriter(folder.toString() + "/Task.tasks");
      PrintWriter writer = new PrintWriter(file);
      writer.print(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.Project"), "name") + "\t");
      final List<String> endpoints = ListSequence.fromList(new ArrayList<String>());
      final List<String> endpointCounts = ListSequence.fromList(new ArrayList<String>());
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "endpoint", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode endpoint) {
          ListSequence.fromList(endpoints).addElement(SPropertyOperations.getString(endpoint, "name"));
          ListSequence.fromList(endpointCounts).addElement(map.get(SPropertyOperations.getString(endpoint, "name")).toString());
        }
      });
      int size = ListSequence.fromList(endpoints).count();
      for (int counter = 0; counter < size; counter++) {
        writer.print(ListSequence.fromList(endpoints).getElement(counter) + "\t");
      }
      for (int counter = 0; counter < size; counter++) {
        writer.print(ListSequence.fromList(endpointCounts).getElement(counter) + "\t");
      }
      writer.close();
      file.close();
    } catch (Exception e) {
      throw new Error("Wrror Printing Task File");
    }
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
