package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.apache.commons.lang.WordUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.io.File;
import java.util.HashMap;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class DataSet_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_generateFiles_6032947574604950587(SNode thisNode) {
    final Wrappers._T<String> endpointDescription = new Wrappers._T<String>(WordUtils.capitalizeFully(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "task", true), "endpoint", false), "name")).replaceAll("\\s", ""));
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "task", true), "categoryReference", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode category) {
        endpointDescription.value = endpointDescription.value + WordUtils.capitalizeFully(SPropertyOperations.getString(SLinkOperations.getTarget(category, "endpointCategory", false), "name")).replaceAll("\\s", "");
      }
    });
    String parentName = WordUtils.capitalize(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.Project"), "name")).replaceAll("\\s", "");
    String datasetName = parentName + "-" + endpointDescription.value + "-" + SPropertyOperations.getString(thisNode, "name").replaceAll("\\s", "");
    File folder = new File(SPropertyOperations.getString(thisNode, "outputLocation") + "/" + parentName);
    folder.mkdirs();
    HashMap categoryCounterMap = DataSet_Behavior.call_createCIDs_6032947574604951771(thisNode, folder, datasetName);
    if (!(categoryCounterMap.isEmpty())) {
      DataSet_Behavior.call_createTask_6032947574607589325(thisNode, folder, datasetName, categoryCounterMap);
    }
  }

  public static HashMap call_createCIDs_6032947574604951771(SNode thisNode, File folder, String datasetName) {
    try {
      String fileName = folder.toString() + "/" + datasetName + ".cids";
      if (DataSet_Behavior.call_checkFile_7083662764406992609(thisNode, fileName)) {
        FileWriter file = new FileWriter(fileName);
        final PrintWriter writer = new PrintWriter(file);
        writer.print(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "task", true), "endpoint", false), "name") + "\t");
        writer.print("SampleId\t");
        final Wrappers._T<String> category = new Wrappers._T<String>();
        final HashMap categoryCountMap = new HashMap(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "task", true), "categoryReference", true)).count());
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "input", true), "sample", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode sample) {
            if ((SLinkOperations.getTarget(sample, "category", false) != null)) {
              writer.println();
              category.value = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(sample, "category", false), "endpointCategory", false), "name");
              writer.print(category.value + "\t");
              writer.print(SPropertyOperations.getString(sample, "name") + "\t");
              if (categoryCountMap.containsKey(category.value)) {
                categoryCountMap.put(category.value, Integer.parseInt(categoryCountMap.remove(category.value).toString()) + 1);
              } else {
                categoryCountMap.put(category.value, 1);
              }
            }
          }
        });
        writer.close();
        file.close();
        return categoryCountMap;
      } else {
        return new HashMap();
      }
    } catch (Exception e) {
      throw new Error("Error Printing CIDs File");
    }
  }

  public static void call_createTask_6032947574607589325(SNode thisNode, File folder, String datasetName, final HashMap categoryCountMap) {
    try {
      String fileName = folder.toString() + "/" + datasetName + ".tasks";
      if (DataSet_Behavior.call_checkFile_7083662764406992609(thisNode, fileName)) {
        FileWriter file = new FileWriter(fileName);
        PrintWriter writer = new PrintWriter(file);
        writer.print(datasetName + "\t");
        final List<String> endpointNames = ListSequence.fromList(new ArrayList<String>());
        final List<String> endpointCounts = ListSequence.fromList(new ArrayList<String>());
        final Wrappers._T<String> categoryName = new Wrappers._T<String>();
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "task", true), "categoryReference", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode categoryref) {
            categoryName.value = SPropertyOperations.getString(SLinkOperations.getTarget(categoryref, "endpointCategory", false), "name");
            ListSequence.fromList(endpointNames).addElement(categoryName.value);
            ListSequence.fromList(endpointCounts).addElement(categoryCountMap.get(categoryName.value).toString());
          }
        });
        int size = ListSequence.fromList(endpointNames).count();
        for (int counter = 0; counter < size; counter++) {
          writer.print(ListSequence.fromList(endpointNames).getElement(counter) + "\t");
        }
        for (int counter = 0; counter < size; counter++) {
          writer.print(ListSequence.fromList(endpointCounts).getElement(counter) + "\t");
        }
        writer.close();
        file.close();
      }
    } catch (Exception e) {
      throw new Error("Error Printing Task File");
    }
  }

  public static boolean call_checkFile_7083662764406992609(SNode thisNode, String fileName) {
    boolean proceed;
    if (new File(fileName).exists()) {
      int reply = JOptionPane.showConfirmDialog(null, fileName + " already exists. Overwrite and Continue?", "File exists", JOptionPane.YES_NO_CANCEL_OPTION);
      switch (reply) {
        case JOptionPane.YES_OPTION:
          proceed = true;
          break;
        default:
          proceed = false;
      }
    } else {
      proceed = true;
    }
    return proceed;
  }
}
