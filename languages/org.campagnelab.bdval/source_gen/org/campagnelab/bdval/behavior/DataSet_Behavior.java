package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.HashMap;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.apache.commons.lang.WordUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.io.File;
import org.apache.commons.io.FileUtils;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.List;
import java.util.ArrayList;

public class DataSet_Behavior {
  public static void init(SNode thisNode) {
    SPropertyOperations.set(thisNode, "run", "" + (true));

  }

  public static void call_generateFiles_6032947574604950587(SNode thisNode) {
    String projectFolder = SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.Project"), "projectFolder");
    String datasetName = DataSet_Behavior.call_getName_290469645480322571(thisNode);
    DataSet_Behavior.call_copyInput_7083662764415129152(thisNode, projectFolder, datasetName);
    if ((SLinkOperations.getTarget(thisNode, "otherFiles", true) != null)) {
      DataSet_Behavior.call_copyOtherFiles_4989762282953266724(thisNode, projectFolder, datasetName);
    }
    HashMap categoryCounterMap = DataSet_Behavior.call_generateCIDs_6032947574604951771(thisNode, projectFolder, datasetName);
    DataSet_Behavior.call_generateTask_6032947574607589325(thisNode, projectFolder, datasetName, categoryCounterMap);
    DataSet_Behavior.call_generateTestSet_3976565827563239534(thisNode, projectFolder, datasetName);
  }

  public static String call_getName_290469645480322571(SNode thisNode) {
    final Wrappers._T<String> endpointDescription = new Wrappers._T<String>(WordUtils.capitalizeFully(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "task", true), "endpoint", false), "name")).replaceAll("\\s", ""));
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "task", true), "categoryReference", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode category) {
        endpointDescription.value = endpointDescription.value + WordUtils.capitalizeFully(SPropertyOperations.getString(SLinkOperations.getTarget(category, "endpointCategory", false), "name")).replaceAll("\\s", "");
      }
    });
    String parentName = SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "org.campagnelab.bdval.structure.Project"), "name");
    return parentName + "_" + endpointDescription.value + "_" + SPropertyOperations.getString(thisNode, "name").replaceAll("\\s", "");
  }

  public static void call_copyInput_7083662764415129152(SNode thisNode, String projectFolder, String datasetName) {
    String inputFolder = projectFolder + "inputs/";
    new File(inputFolder).mkdir();
    String fileName = inputFolder + new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "input", true), "file", true), "fileLocation")).getName();
    try {
      FileUtils.copyFile(new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "input", true), "file", true), "fileLocation")), new File(fileName));
    } catch (Exception e) {
      throw new Error("Error Copying Input File");
    }
  }

  public static void call_copyOtherFiles_4989762282953266724(SNode thisNode, String projectFoler, String datasetName) {
    if (isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "otherFiles", true), "pathwaysFile", true), "fileLocation"))) {
      String pathwayFolder = projectFoler + "pathways/";
      new File(pathwayFolder).mkdir();
      String pathwaysFile = pathwayFolder + new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "otherFiles", true), "pathwaysFile", true), "fileLocation")).getName();
      String geneToProbesFile = pathwayFolder + new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "otherFiles", true), "geneToProbesFile", true), "fileLocation")).getName();
      try {
        FileUtils.copyFile(new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "otherFiles", true), "pathwaysFile", true), "fileLocation")), new File(pathwaysFile));
        FileUtils.copyFile(new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "otherFiles", true), "geneToProbesFile", true), "fileLocation")), new File(geneToProbesFile));
      } catch (Exception e) {
        throw new Error("Error Copying Pathway Files");
      }
    }
    if (isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "otherFiles", true), "survivalFile", true), "fileLocation"))) {
      String survivalFolder = projectFoler + "survivals/";
      new File(survivalFolder).mkdir();
      String survivalFile = survivalFolder + new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "otherFiles", true), "survivalFile", true), "fileLocation")).getName();
      try {
        FileUtils.copyFile(new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "otherFiles", true), "survivalFile", true), "fileLocation")), new File(survivalFile));
      } catch (Exception e) {
        throw new Error("Error Copying Survival File");
      }
    }
  }

  public static HashMap call_generateCIDs_6032947574604951771(SNode thisNode, String projectFoler, String datasetName) {
    try {
      String cidsFolder = projectFoler + "cids/";
      new File(cidsFolder).mkdir();
      String fileName = cidsFolder + datasetName + ".cids";
      FileWriter file = new FileWriter(fileName);
      final PrintWriter writer = new PrintWriter(file);
      writer.print(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "task", true), "endpoint", false), "name") + "\t");
      writer.print("SampleId\t");
      final Wrappers._T<String> category = new Wrappers._T<String>();
      final HashMap categoryCountMap = new HashMap(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "task", true), "categoryReference", true)).count());
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "input", true), "sample", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode sample) {
          if ((SLinkOperations.getTarget(sample, "category", false) != null)) {
            writer.println();
            category.value = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(sample, "category", false), "endpointCategory", false), "name");
            writer.print(category.value + "\t");
            writer.print(SPropertyOperations.getString(sample, "name") + "\t");
            if (categoryCountMap.containsKey(category.value)) {
              categoryCountMap.put(category.value, Integer.parseInt(categoryCountMap.remove(category.value).toString()) + 1);
            } else {
              categoryCountMap.put(category.value, 1);
            }
          }
        }
      });
      writer.close();
      file.close();
      return categoryCountMap;
    } catch (Exception e) {
      throw new Error("Error Printing CIDs File");
    }
  }

  public static void call_generateTask_6032947574607589325(SNode thisNode, String projectFolder, String datasetName, final HashMap categoryCountMap) {
    try {
      String taskFolder = projectFolder + "tasks/";
      new File(taskFolder).mkdir();
      String fileName = taskFolder + datasetName + ".tasks";
      FileWriter file = new FileWriter(fileName);
      PrintWriter writer = new PrintWriter(file);
      writer.print(datasetName + "\t");
      final List<String> endpointNames = ListSequence.fromList(new ArrayList<String>());
      final List<String> endpointCounts = ListSequence.fromList(new ArrayList<String>());
      final Wrappers._T<String> categoryName = new Wrappers._T<String>();
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "task", true), "categoryReference", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode categoryref) {
          categoryName.value = SPropertyOperations.getString(SLinkOperations.getTarget(categoryref, "endpointCategory", false), "name");
          ListSequence.fromList(endpointNames).addElement(categoryName.value);
          ListSequence.fromList(endpointCounts).addElement(categoryCountMap.get(categoryName.value).toString());
        }
      });
      int size = ListSequence.fromList(endpointNames).count();
      for (int counter = 0; counter < size; counter++) {
        writer.print(ListSequence.fromList(endpointNames).getElement(counter) + "\t");
      }
      for (int counter = 0; counter < size; counter++) {
        writer.print(ListSequence.fromList(endpointCounts).getElement(counter) + "\t");
      }
      writer.close();
      file.close();
    } catch (Exception e) {
      throw new Error("Error Printing Task File");
    }
  }

  public static void call_generateTestSet_3976565827563239534(SNode thisNode, String projectFolder, String datasetName) {
    // TODO: fix this 
    boolean testset = false;
    if (testset) {
      String testSetFolder = projectFolder + "test-sets/";
      new File(testSetFolder).mkdir();
      String fileName = testSetFolder + datasetName + "-samples.txt";
      try {
        FileWriter file = new FileWriter(fileName);
        final PrintWriter writer = new PrintWriter(file);
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "input", true), "sample", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode sample) {
            if ((SLinkOperations.getTarget(SLinkOperations.getTarget(sample, "category", false), "endpointCategory", false) != null)) {
              writer.print(SPropertyOperations.getString(sample, "name"));
              writer.println();
            }
          }
        });
        writer.close();
        file.close();
      } catch (Exception e) {
        throw new Error("Error Printing Test-Set File");
      }
    }
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
