package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.io.File;
import java.io.FileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import java.io.FileReader;
import java.io.BufferedReader;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.DefaultLogger;
import java.io.PrintStream;
import java.sql.Timestamp;
import java.util.Date;
import org.apache.tools.ant.ProjectHelper;

public class Result_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String call_getMaqciiFile_6380268605234804481(SNode thisNode, File resultFolder) {
    FileFilter maqciiFileFilter = new SuffixFileFilter("-maqcii-submission.txt");
    File[] maqciiFiles = resultFolder.listFiles(maqciiFileFilter);
    long lastMod = Long.MIN_VALUE;
    String maqcii = "";
    for (File file : maqciiFiles) {
      if (file.lastModified() > lastMod) {
        maqcii = file.getAbsolutePath();
        lastMod = file.lastModified();
      }
    }
    return maqcii;
  }

  public static void call_readMaqciiFile_6380268605206873743(SNode thisNode, String file) {
    if (!(file.isEmpty())) {
      try {
        FileReader reader = new FileReader(new File(file));
        BufferedReader fileReader = new BufferedReader(reader);
        SLinkOperations.setTarget(thisNode, "MCC", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "accuracy", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "sensitivity", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "specificity", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "AUC", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "RMSE", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        String line;
        fileReader.readLine();
        Object[] lineArray;
        while ((line = fileReader.readLine()) != null) {
          lineArray = line.split("\t");
          SLinkOperations.setTarget(thisNode, "MCC", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "MCC", true), lineArray[4].toString()), true);
          SLinkOperations.setTarget(thisNode, "accuracy", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "accuracy", true), lineArray[5].toString()), true);
          SLinkOperations.setTarget(thisNode, "sensitivity", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "sensitivity", true), lineArray[6].toString()), true);
          SLinkOperations.setTarget(thisNode, "specificity", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "specificity", true), lineArray[7].toString()), true);
          SLinkOperations.setTarget(thisNode, "AUC", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "AUC", true), lineArray[8].toString()), true);
          SLinkOperations.setTarget(thisNode, "RMSE", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "RMSE", true), lineArray[9].toString()), true);
        }
        SLinkOperations.setTarget(thisNode, "MCC", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "MCC", true)), true);
        SLinkOperations.setTarget(thisNode, "accuracy", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "accuracy", true)), true);
        SLinkOperations.setTarget(thisNode, "sensitivity", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "sensitivity", true)), true);
        SLinkOperations.setTarget(thisNode, "specificity", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "specificity", true)), true);
        SLinkOperations.setTarget(thisNode, "AUC", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "AUC", true)), true);
        SLinkOperations.setTarget(thisNode, "RMSE", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "RMSE", true)), true);
        SPropertyOperations.set(thisNode, "maqciiFile", file);
      } catch (Exception e) {
        throw new Error("Error reading Maqcii File");
      }
    }
  }

  public static SNode call_checkMinMax_6380268605259355313(SNode thisNode, SNode rangeNode, String currentValue) {
    if (Float.valueOf(currentValue) > Float.valueOf(SPropertyOperations.getString(rangeNode, "max"))) {
      SPropertyOperations.set(rangeNode, "max", currentValue);
    }
    if (Float.valueOf(currentValue) < Float.valueOf(SPropertyOperations.getString(rangeNode, "min"))) {
      SPropertyOperations.set(rangeNode, "min", currentValue);
    }
    return rangeNode;
  }

  public static SNode call_checkNaN_6380268605264471520(SNode thisNode, SNode rangeNode) {
    try {
      if (Integer.parseInt(SPropertyOperations.getString(rangeNode, "max")) == Integer.MIN_VALUE) {
        SPropertyOperations.set(rangeNode, "max", "NaN");
      }
      if (Integer.parseInt(SPropertyOperations.getString(rangeNode, "min")) == Integer.MAX_VALUE) {
        SPropertyOperations.set(rangeNode, "min", "NaN");
      }
    } catch (NumberFormatException e) {
      // rangeNode.value as a float would throw error 
    }
    return rangeNode;
  }

  public static void call_evaluateStatistics_3634366430331113687(SNode thisNode) {
    SNode project = SNodeOperations.getAncestor(thisNode, "org.campagnelab.bdval.structure.Project", false, false);
    String folder = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(project, "properties", true), "outputDirectory", true), "directoryLocation") + "/" + SPropertyOperations.getString(project, "name") + "/" + SPropertyOperations.getString(SLinkOperations.getTarget(project, "properties", true), "directoryName") + "/";
    Project p = new Project();
    try {
      File buildFile = new File(folder + SPropertyOperations.getString(project, "name") + ".xml");
      p.setUserProperty("ant.file", buildFile.getAbsolutePath());

      DefaultLogger consoleLogger = new DefaultLogger();
      consoleLogger.setErrorPrintStream(System.err);
      consoleLogger.setOutputPrintStream(new PrintStream(new File(folder + "memo/" + SPropertyOperations.getString(project, "name") + "-restat-" + String.format("%1$TF=%1$TR", new Timestamp(new Date().getTime())).replaceAll("-", "").replaceAll("=", "-").replaceAll(":", ""))));
      consoleLogger.setMessageOutputLevel(Project.MSG_INFO);
      p.addBuildListener(consoleLogger);

      p.setProperty("results-directory", folder + SPropertyOperations.getString(thisNode, "name"));
      p.setProperty("model-conditions", folder + SPropertyOperations.getString(thisNode, "name") + "/" + "model-conditions.txt");
      p.setProperty("other-measures", "bias");

      p.fireBuildStarted();
      p.init();
      ProjectHelper helper = ProjectHelper.getProjectHelper();
      p.addReference("ant.projectHelper", helper);
      helper.parse(p, buildFile);
      p.executeTarget("restat");
      p.fireBuildFinished(null);
    } catch (Exception e) {
      p.fireBuildFinished(e);
      throw new Error("Error calculating statistics" + e);
    }
    Result_Behavior.call_readMaqciiFile_6380268605206873743(thisNode, Result_Behavior.call_getMaqciiFile_6380268605234804481(thisNode, new File(folder + SPropertyOperations.getString(thisNode, "name"))));
  }

  public static void call_generateFinalModel_6380268605238741230(SNode thisNode) {
    SNode project = SNodeOperations.getAncestor(thisNode, "org.campagnelab.bdval.structure.Project", false, false);
    String folder = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(project, "properties", true), "outputDirectory", true), "directoryLocation") + "/" + SPropertyOperations.getString(project, "name") + "/" + SPropertyOperations.getString(SLinkOperations.getTarget(project, "properties", true), "directoryName") + "/";
    Project p = new Project();
    try {
      File buildFile = new File(folder + SPropertyOperations.getString(project, "name") + ".xml");
      p.setUserProperty("ant.file", buildFile.getAbsolutePath());

      DefaultLogger consoleLogger = new DefaultLogger();
      consoleLogger.setErrorPrintStream(System.err);
      consoleLogger.setOutputPrintStream(new PrintStream(new File(folder + "memo/" + SPropertyOperations.getString(project, "name") + "-generateModel-" + String.format("%1$TF=%1$TR", new Timestamp(new Date().getTime())).replaceAll("-", "").replaceAll("=", "-").replaceAll(":", ""))));
      consoleLogger.setMessageOutputLevel(Project.MSG_INFO);
      p.addBuildListener(consoleLogger);

      p.setProperty("results-directory", folder + SPropertyOperations.getString(thisNode, "name"));
      p.setProperty("model-conditions", folder + SPropertyOperations.getString(thisNode, "name") + "/" + "model-conditions.txt");
      p.setProperty("consensus-type", "pathways:models");

      p.fireBuildStarted();
      p.init();
      ProjectHelper helper = ProjectHelper.getProjectHelper();
      p.addReference("ant.projectHelper", helper);
      helper.parse(p, buildFile);
      p.executeTarget("mps-generate-final-models");
      p.fireBuildFinished(null);
    } catch (Exception e) {
      p.fireBuildFinished(e);
      throw new Error("Error calculating statistics" + e);
    }
  }
}
