package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.apache.tools.ant.Project;
import java.io.File;
import org.apache.tools.ant.DefaultLogger;
import java.io.PrintStream;
import org.apache.tools.ant.ProjectHelper;
import java.io.FileReader;
import java.io.BufferedReader;

public class Result_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_evaluateStatistics_3634366430331113687(SNode thisNode) {
    SNode project = SNodeOperations.getAncestor(thisNode, "org.campagnelab.bdval.structure.Project", false, false);
    String name = SPropertyOperations.getString(project, "name").replaceAll("\\s", "").trim();
    String folder = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(project, "properties", true), "outputDirectory", true), "directoryLocation") + "/" + name + "/" + SPropertyOperations.getString(SLinkOperations.getTarget(project, "properties", true), "directoryName") + "/";
    Project p = new Project();
    try {
      File buildFile = new File(folder + name + ".xml");
      p.setUserProperty("ant.file", buildFile.getAbsolutePath());

      DefaultLogger consoleLogger = new DefaultLogger();
      consoleLogger.setErrorPrintStream(System.err);
      consoleLogger.setOutputPrintStream(new PrintStream(new File(folder + "memo/restat.txt")));
      consoleLogger.setMessageOutputLevel(Project.MSG_INFO);
      p.addBuildListener(consoleLogger);

      p.setProperty("results-directory", SPropertyOperations.getString(thisNode, "name"));
      p.setProperty("model-conditions", "model-conditions.txt");
      p.setProperty("other-measures", "bias");

      p.fireBuildStarted();
      p.init();
      ProjectHelper helper = ProjectHelper.getProjectHelper();
      p.addReference("ant.projectHelper", helper);
      helper.parse(p, buildFile);
      p.executeTarget("restat");
      p.fireBuildFinished(null);
    } catch (Exception e) {
      p.fireBuildFinished(e);
      throw new Error("Error calculating statistics" + e);
    }
    String command = "restat -Dresults-directory=" + SPropertyOperations.getString(thisNode, "name") + " -Dmodel-conditions=model-conditions.txt" + " -Dother-measures=bias";
  }

  public static void call_readMAQCIIfile_6380268605206873743(SNode thisNode, String file) {
    if (!(file.isEmpty())) {
      try {
        FileReader reader = new FileReader(new File(file));
        BufferedReader fileReader = new BufferedReader(reader);
        fileReader.readLine();
        Object[] lineArray = fileReader.readLine().split("\t");
        SPropertyOperations.set(thisNode, "MCC", lineArray[4].toString());
        SPropertyOperations.set(thisNode, "accuracy", lineArray[5].toString());
        SPropertyOperations.set(thisNode, "sensitivity", lineArray[6].toString());
        SPropertyOperations.set(thisNode, "specificity", lineArray[7].toString());
        SPropertyOperations.set(thisNode, "AUC", lineArray[8].toString());
        SPropertyOperations.set(thisNode, "RMSE", lineArray[9].toString());
        SPropertyOperations.set(thisNode, "noMaqcii", "" + (false));
      } catch (Exception e) {
        SPropertyOperations.set(thisNode, "noMaqcii", "" + (true));
      }
    } else {
      SPropertyOperations.set(thisNode, "noMaqcii", "" + (true));
    }


  }
}
