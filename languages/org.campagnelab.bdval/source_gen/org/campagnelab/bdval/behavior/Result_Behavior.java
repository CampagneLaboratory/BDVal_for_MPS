package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.io.File;
import java.io.FileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import java.io.FileReader;
import java.io.BufferedReader;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.apache.tools.ant.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.progress.ProgressManager;
import org.apache.tools.ant.DefaultLogger;
import java.io.PrintStream;
import java.sql.Timestamp;
import java.util.Date;
import jetbrains.mps.smodel.DefaultModelAccess;
import org.apache.commons.io.FileUtils;

public class Result_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String call_getMaqciiFile_6380268605234804481(SNode thisNode, File resultFolder) {
    FileFilter maqciiFileFilter = new SuffixFileFilter("-maqcii-submission.txt");
    File[] maqciiFiles = resultFolder.listFiles(maqciiFileFilter);
    long lastMod = Long.MIN_VALUE;
    String maqcii = "";
    for (File file : maqciiFiles) {
      if (file.lastModified() > lastMod) {
        maqcii = file.getAbsolutePath();
        lastMod = file.lastModified();
      }
    }
    return maqcii;
  }

  public static void call_readMaqciiFile_6380268605206873743(SNode thisNode, String file) {
    if (!(file.isEmpty())) {
      try {
        FileReader reader = new FileReader(new File(file));
        BufferedReader fileReader = new BufferedReader(reader);
        SLinkOperations.setTarget(thisNode, "MCC", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "accuracy", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "sensitivity", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "specificity", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "AUC", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        SLinkOperations.setTarget(thisNode, "RMSE", SConceptOperations.createNewNode("org.campagnelab.bdval.structure.FloatRange", null), true);
        String line;
        fileReader.readLine();
        Object[] lineArray;
        while ((line = fileReader.readLine()) != null) {
          lineArray = line.split("\t");
          SLinkOperations.setTarget(thisNode, "MCC", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "MCC", true), lineArray[4].toString()), true);
          SLinkOperations.setTarget(thisNode, "accuracy", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "accuracy", true), lineArray[5].toString()), true);
          SLinkOperations.setTarget(thisNode, "sensitivity", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "sensitivity", true), lineArray[6].toString()), true);
          SLinkOperations.setTarget(thisNode, "specificity", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "specificity", true), lineArray[7].toString()), true);
          SLinkOperations.setTarget(thisNode, "AUC", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "AUC", true), lineArray[8].toString()), true);
          SLinkOperations.setTarget(thisNode, "RMSE", Result_Behavior.call_checkMinMax_6380268605259355313(thisNode, SLinkOperations.getTarget(thisNode, "RMSE", true), lineArray[9].toString()), true);
        }
        SLinkOperations.setTarget(thisNode, "MCC", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "MCC", true)), true);
        SLinkOperations.setTarget(thisNode, "accuracy", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "accuracy", true)), true);
        SLinkOperations.setTarget(thisNode, "sensitivity", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "sensitivity", true)), true);
        SLinkOperations.setTarget(thisNode, "specificity", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "specificity", true)), true);
        SLinkOperations.setTarget(thisNode, "AUC", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "AUC", true)), true);
        SLinkOperations.setTarget(thisNode, "RMSE", Result_Behavior.call_checkNaN_6380268605264471520(thisNode, SLinkOperations.getTarget(thisNode, "RMSE", true)), true);
        SPropertyOperations.set(thisNode, "maqciiFile", file);
      } catch (Exception e) {
        throw new Error("Error reading Maqcii File: " + e);
      }
    }
  }

  public static SNode call_checkMinMax_6380268605259355313(SNode thisNode, SNode rangeNode, String currentValue) {
    if (Float.valueOf(currentValue) > Float.valueOf(SPropertyOperations.getString(rangeNode, "max"))) {
      SPropertyOperations.set(rangeNode, "max", currentValue);
    }
    if (Float.valueOf(currentValue) < Float.valueOf(SPropertyOperations.getString(rangeNode, "min"))) {
      SPropertyOperations.set(rangeNode, "min", currentValue);
    }
    return rangeNode;
  }

  public static SNode call_checkNaN_6380268605264471520(SNode thisNode, SNode rangeNode) {
    try {
      if (Integer.parseInt(SPropertyOperations.getString(rangeNode, "max")) == Integer.MIN_VALUE) {
        SPropertyOperations.set(rangeNode, "max", "NaN");
      }
      if (Integer.parseInt(SPropertyOperations.getString(rangeNode, "min")) == Integer.MAX_VALUE) {
        SPropertyOperations.set(rangeNode, "min", "NaN");
      }
    } catch (NumberFormatException e) {
      // rangeNode.value as a float would throw error 
    }
    return rangeNode;
  }

  public static void call_evaluateStatistics_3634366430331113687(SNode thisNode) {
    final SNode bdValProject = SNodeOperations.getAncestor(thisNode, "org.campagnelab.bdval.structure.Project", false, false);
    final String folder = Project_Behavior.call_getProjectFolder_7139671938570003285(bdValProject, SPropertyOperations.getString(thisNode, "directory"));
    final Project p = new Project();
    final String bdvalProjectName = SPropertyOperations.getString(bdValProject, "name");
    final String resultName = SPropertyOperations.getString(thisNode, "name");
    final SNode result = thisNode;

    {
      final SNode thisNodeFinal = thisNode;
      com.intellij.openapi.project.Project project = ProjectHelper.toIdeaProject(ProjectHelper.getProject(SNodeOperations.getModel(thisNode).getRepository()));
      Task.Backgroundable back = new Task.Backgroundable(project, "Evaluate Statistics", false) {
        public void run(@NotNull ProgressIndicator p0) {
          final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();
          indicator.setText("Evaluate Statistics");
          indicator.pushState();
          try {
            try {

              File buildFile = new File(folder + bdvalProjectName + ".xml");
              p.setUserProperty("ant.file", buildFile.getAbsolutePath());

              DefaultLogger consoleLogger = new DefaultLogger();
              consoleLogger.setErrorPrintStream(System.err);
              consoleLogger.setOutputPrintStream(new PrintStream(new File(folder + "memo/" + bdvalProjectName + "-restat-" + String.format("%1$TF=%1$TR", new Timestamp(new Date().getTime())).replaceAll("-", "").replaceAll("=", "-").replaceAll(":", ""))));
              consoleLogger.setMessageOutputLevel(Project.MSG_INFO);
              p.addBuildListener(consoleLogger);

              p.setProperty("results-directory", folder + resultName);
              p.setProperty("model-conditions", folder + resultName + "/" + "model-conditions.txt");
              p.setProperty("other-measures", "bias");

              p.fireBuildStarted();
              p.init();
              org.apache.tools.ant.ProjectHelper helper = org.apache.tools.ant.ProjectHelper.getProjectHelper();
              p.addReference("ant.projectHelper", helper);
              helper.parse(p, buildFile);
              p.executeTarget("restat");
              p.fireBuildFinished(null);
            } catch (Exception e) {
              p.fireBuildFinished(e);
              throw new Error("Error calculating statistics: " + e);
            }
          } finally {
            indicator.setText("Evaluate Statistics" + " completed");
            indicator.stop();
          }
        }

        @Override
        public void onSuccess() {
          DefaultModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {

              Result_Behavior.call_readMaqciiFile_6380268605206873743(result, Result_Behavior.call_getMaqciiFile_6380268605234804481(result, new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(bdValProject, "properties", true), "outputDirectory", true), "directoryLocation") + "/" + SPropertyOperations.getString(bdValProject, "name") + "/" + SPropertyOperations.getString(result, "directory") + "/" + resultName)));

            }
          });

        }



        @Override
        public void onCancel() {
          DefaultModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {


            }
          });

        }
      };
      ProgressManager.getInstance().run(back);

    }
  }

  public static void call_generateFinalModel_6380268605238741230(SNode thisNode) {
    final SNode bdValProject = SNodeOperations.getAncestor(thisNode, "org.campagnelab.bdval.structure.Project", false, false);
    final String bdvalProjectName = SPropertyOperations.getString(bdValProject, "name");
    final String folder = Project_Behavior.call_getProjectFolder_7139671938570003285(bdValProject, SPropertyOperations.getString(thisNode, "directory"));
    final String resultName = SPropertyOperations.getString(thisNode, "name");
    final Project p = new Project();
    final SNode result = thisNode;
    {
      final SNode thisNodeFinal = thisNode;
      com.intellij.openapi.project.Project project = ProjectHelper.toIdeaProject(ProjectHelper.getProject(SNodeOperations.getModel(thisNode).getRepository()));
      Task.Backgroundable back = new Task.Backgroundable(project, "Generate Final Models", true) {
        public void run(@NotNull ProgressIndicator p0) {
          final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();
          indicator.setText("Generate Final Models");
          indicator.pushState();
          try {
            try {
              File buildFile = new File(folder + bdvalProjectName + ".xml");
              p.setUserProperty("ant.file", buildFile.getAbsolutePath());

              DefaultLogger consoleLogger = new DefaultLogger();
              consoleLogger.setErrorPrintStream(System.err);
              consoleLogger.setOutputPrintStream(new PrintStream(new File(folder + "memo/" + bdvalProjectName + "-generateModel-" + String.format("%1$TF=%1$TR", new Timestamp(new Date().getTime())).replaceAll("-", "").replaceAll("=", "-").replaceAll(":", ""))));
              consoleLogger.setMessageOutputLevel(Project.MSG_INFO);
              p.addBuildListener(consoleLogger);

              p.setProperty("results-directory", folder + resultName);
              p.setProperty("model-conditions", folder + resultName + "/" + "model-conditions.txt");
              p.setProperty("consensus-type", "pathways:models");

              p.fireBuildStarted();
              p.init();
              org.apache.tools.ant.ProjectHelper helper = org.apache.tools.ant.ProjectHelper.getProjectHelper();
              p.addReference("ant.projectHelper", helper);
              helper.parse(p, buildFile);
              p.executeTarget("mps-generate-final-models");
              p.fireBuildFinished(null);
            } catch (Exception e) {
              p.fireBuildFinished(e);
              throw new Error("Error generating final models" + e);
            }
          } finally {
            indicator.setText("Generate Final Models" + " completed");
            indicator.stop();
          }
        }

        @Override
        public void onSuccess() {
          DefaultModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {

              Result_Behavior.call_updateFinalModel_4971583211585883350(result, SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(bdValProject, "properties", true), "outputDirectory", true), "directoryLocation") + "/" + SPropertyOperations.getString(bdValProject, "name") + "/" + SPropertyOperations.getString(result, "directory") + "/" + SPropertyOperations.getString(result, "name"));


            }
          });

        }



        @Override
        public void onCancel() {
          DefaultModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {

              SPropertyOperations.set(result, "finalModels", "" + (false));

            }
          });

        }
      };
      ProgressManager.getInstance().run(back);

    }
  }

  public static void call_updateFinalModel_4971583211585883350(SNode thisNode, String resultFolder) {
    String[] zip = {"zip"};
    File finalModelsFolder = new File(resultFolder + "/final-models/");
    if (finalModelsFolder.exists()) {
      SPropertyOperations.set(thisNode, "finalModels", "" + (true));
      SPropertyOperations.set(thisNode, "numberFinalModels", "" + (FileUtils.listFiles(finalModelsFolder, zip, true).size()));
    } else {
      SPropertyOperations.set(thisNode, "finalModels", "" + (false));
    }
  }
}
