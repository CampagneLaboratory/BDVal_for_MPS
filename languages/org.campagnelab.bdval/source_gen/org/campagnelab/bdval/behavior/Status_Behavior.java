package org.campagnelab.bdval.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.io.FileFilter;
import java.io.File;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.TrueFileFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class Status_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_updateStatus_4578313781751627046(final SNode thisNode) {
    SLinkOperations.getTargets(thisNode, "result", true).clear();
    final Wrappers._T<SNode> result = new Wrappers._T<SNode>();
    SNode project = SNodeOperations.getAncestor(thisNode, "org.campagnelab.bdval.structure.Project", false, false);
    final FileFilter resultsFilter = new FileFilter() {
      public boolean accept(File file) {
        return file.isDirectory() && file.getName().endsWith("-results");
      }
    };
    final IOFileFilter predictionsFileFilter = new SuffixFileFilter("-prediction-table.txt");
    File dir = new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(project, "properties", true), "outputDirectory", true), "directoryLocation") + "/" + SPropertyOperations.getString(project, "name"));
    if (dir.exists() && dir.isDirectory()) {
      Sequence.fromIterable(Sequence.fromArray(dir.listFiles())).visitAll(new IVisitor<File>() {
        public void visit(File directory) {
          if (directory.exists() && directory.isDirectory()) {
            if (LOG.isInfoEnabled()) {
              LOG.info("Scanning " + directory.getAbsolutePath());
            }

            for (File resultFolder : directory.listFiles(resultsFilter)) {
              result.value = SConceptOperations.createNewNode("org.campagnelab.bdval.structure.Result", null);
              SPropertyOperations.set(result.value, "name", resultFolder.getName());
              SPropertyOperations.set(result.value, "directory", resultFolder.getParentFile().getName());
              File predictionsFolder = new File(resultFolder.getAbsolutePath() + "/predictions/");
              if (predictionsFolder.exists() && predictionsFolder.isDirectory()) {
                SPropertyOperations.set(result.value, "numberModels", "" + (FileUtils.listFiles(predictionsFolder, predictionsFileFilter, TrueFileFilter.INSTANCE).size()));
              }
              Result_Behavior.call_readMaqciiFile_6380268605206873743(result.value, Result_Behavior.call_getMaqciiFile_6380268605234804481(result.value, resultFolder));
              Result_Behavior.call_updateFinalModel_4971583211585883350(result.value, resultFolder.getAbsolutePath());
              ListSequence.fromList(SLinkOperations.getTargets(thisNode, "result", true)).addElement(result.value);
            }
          }
        }
      });
    }
  }

  protected static Logger LOG = LogManager.getLogger(Status_Behavior.class);
}
