package org.campagnelab.bdval.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx2;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.resources.TResource;
import jetbrains.mps.project.facets.JavaModuleFacet;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.SNodeOperations;
import java.io.File;
import jetbrains.mps.util.FileUtil;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;

public class CopyXML_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("org.campagnelab.bdval.CopyXML");

  public CopyXML_Facet() {
    ListSequence.fromList(targets).addElement(new CopyXML_Facet.Target_copy());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("org.campagnelab.bdval.getInfo")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new CopyXML_Facet.TargetProperties();
  }

  public static class Target_copy implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("org.campagnelab.bdval.CopyXML.copy");

    public Target_copy() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_lne71d_a0a = null;
          final Iterable<TResource> input = (Iterable<TResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              _output_lne71d_a0a = Sequence.fromIterable(_output_lne71d_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new CopyXMLTuple(null, null))));
              progressMonitor.start("Copying XML files", 1);
              String info1 = "Copying XML Files";
              int counter = 0;
              for (TResource tres : Sequence.fromIterable(input)) {
                JavaModuleFacet javaFacet = tres.module().getFacet(JavaModuleFacet.class);
                IFile classesGenFolder = javaFacet.getClassesGen().getDescendant(SNodeOperations.getModelLongName(tres.modelDescriptor()).replace(".", "/"));
                String info2 = "Class Gen Folder: " + classesGenFolder;
                File sourceFolder;
                sourceFolder = new File(classesGenFolder.getPath());
                String info3 = "Source Folder: " + sourceFolder;
                FileUtil.copyFile(new File(sourceFolder + "/" + "Example" + ".xml"), new File("/Users/vmb34/Desktop/Example/" + "Example" + ".xml"));
                counter++;
                String info4 = "Project Name: " + getInfo_Facet.Target_extract.vars(pa.global()).projectNames().get(0);
                String info5 = "Project Name: " + getInfo_Facet.Target_extract.vars(pa.global()).outputLocation().get(0);
                String targetFolder = null;
                for (SNode root : tres.modelDescriptor().getRootNodes()) {
                  {
                    SNode project = root;
                    if (jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(project, "org.campagnelab.bdval.structure.Project")) {
                      SNode p = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(root, "org.campagnelab.bdval.structure.Project");
                      targetFolder = SPropertyOperations.getString(SLinkOperations.getTarget(p, "properties", true), "outputLocation") + SPropertyOperations.getString(p, "name").replaceAll("\\s", "");
                      String info6 = "Target Folder: " + targetFolder;
                      File targetFile = new File(targetFolder);
                      for (File fileInFolder : sourceFolder.listFiles()) {
                        FileUtil.copyFile(fileInFolder, targetFile);
                      }
                    }
                  }
                }
                _output_lne71d_a0a = Sequence.fromIterable(_output_lne71d_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(tres)));
              }
              progressMonitor.done();
              return new IResult.SUCCESS(_output_lne71d_a0a);
            default:
              return new IResult.SUCCESS(_output_lne71d_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen"), new ITarget.Name("org.campagnelab.bdval.getInfo.extract")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Make.reconcile")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return false;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(TResource.class);
      return rv;
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._2) t).assign((Tuples._2) copyFrom);
      }
      return t;
    }

    public int workEstimate() {
      return 400;
    }

    public static CopyXML_Facet.Target_copy.Parameters vars(IPropertiesPool ppool) {
      return ppool.properties(name, CopyXML_Facet.Target_copy.Parameters.class);
    }

    public static class Parameters extends MultiTuple._2<List<String>, List<String>> {
      public Parameters() {
        super();
      }

      public Parameters(List<String> projectNames, List<String> outputLocations) {
        super(projectNames, outputLocations);
      }

      public List<String> projectNames(List<String> value) {
        return super._0(value);
      }

      public List<String> outputLocations(List<String> value) {
        return super._1(value);
      }

      public List<String> projectNames() {
        return super._0();
      }

      public List<String> outputLocations() {
        return super._1();
      }

      @SuppressWarnings(value = "unchecked")
      public CopyXML_Facet.Target_copy.Parameters assignFrom(Tuples._2<List<String>, List<String>> from) {
        return (CopyXML_Facet.Target_copy.Parameters) super.assign(from);
      }
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("org.campagnelab.bdval.CopyXML.copy");
        if (properties.hasProperties(name)) {
          CopyXML_Facet.Target_copy.Parameters props = properties.properties(name, CopyXML_Facet.Target_copy.Parameters.class);
          MapSequence.fromMap(store).put("org.campagnelab.bdval.CopyXML.copy.projectNames", null);
          MapSequence.fromMap(store).put("org.campagnelab.bdval.CopyXML.copy.outputLocations", null);
        }
      }
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("org.campagnelab.bdval.CopyXML.copy");
          CopyXML_Facet.Target_copy.Parameters props = properties.properties(name, CopyXML_Facet.Target_copy.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("org.campagnelab.bdval.CopyXML.copy.projectNames")) {
            props.projectNames(null);
          }
          if (MapSequence.fromMap(store).containsKey("org.campagnelab.bdval.CopyXML.copy.outputLocations")) {
            props.outputLocations(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
